{
  "pageTitle":"Data Definitions",
  "paragraph1":"SunnieJS allows to automate and dynamize data loading and the generation of certain data structures through data attributes.",
  "dataLoadingTitle":"Data Loading",
  "dataLoadingParagraph1":"It allows to make requests to REST services, obtain their data, structure them by means of templates and display them in a desired place, among other things.",
  "dataLoadingParagraph2":"To enable dynamic data loading, add the attribute data-load='true' and then, those attributes that are necessary to perform the desired operation.",
  "dataLoadingParagraph3":"Below is the complete list of attributes.",
  "dataLoadingTableTH1":"Data Attribute",
  "dataLoadingTableTH2":"Description",
  "dataLoadingTableTH3":"Default",
  "dataLoadingTableTH4":"How to",
  "dataLoadingTableServiceDataDescription":"URL of the REST service from which you will obtain the data",
  "dataLoadingTableMethodDescription":"Type of method with which the service is called. POST or GET",
  "dataLoadingTableTemplateDescription":"JQuery tmpl template ID on which the obtained data will be loaded. It should be left empty if you do not want to load the data on any template.",
  "dataLoadingTableTargetDescription":"ID of the container on which the template with the data will be loaded. It should be left empty if you do not want to show the data.",
  "dataLoadingTableInitialPageDescription":"Data page that you want to load through the REST service. Leave it to 0 if you wish to load the complete list of data without paging.",
  "dataLoadingTableItemsPerPageDescription":"Number of rows per page that you want to load. Leave it to 0 if you wish to load the complete list of data without paging.",
  "dataLoadingTableAditionalDataDescription":"Additional data that you want to send through the body of the service. Use the 'data' parameter of $.AJAX to send the additional data in JSON format.",
  "dataLoadingTableCallbackDescription":"Name of the additional function to execute once the REST service request has been made and this returns the result. By default, the function receives the data returned by the invoked service. Leave empty if you do not want to execute anything.",
  "dataLoadingTableContentDescription":"Parameters or additional content sent to the defined callback function. Leave empty if it is not necessary to send any additional data.",
  "dataLoadingTableEnableGetParamsDescription":"Enable the service to use the get parameters defined in the URL. It is usually used in conjunction with the filters or search engine to allow a list of data to be sorted or filtered.",
  "dataLoadingTableGetParamsListDescription":"If it is defined, it allows choosing which parameters get affect the list of data that we are loading, thus allowing the choice of what parameters we want to affect the list of data. It should be used together with enable-get-params.",
  "dataLoadingTableRelDescription":"This parameter allows the filters to be grouped so that only those published in said rel apply. From data-filter another data-rel must be defined which makes those filters are linked to this group making those listings of data belonging to the same group apply those filters. Additionally, it can work with the data-get-params-list attribute to define a more limited number of filters. Those filters that belong to a group will be shown in the URL as 'namefilter_nameRel' but when applied to the service it is sent without the rel. Thanks to this you can perform custom data filtering by applying multiple filtering parameters for each list of data without interfering with each other.",
  "dataLoadingTableLiveReloadDescription":"It allows the service to be recharged periodically to create a service in real time that reloads the data every X milliseconds. The time of the interval is defined in the parameter 'time-reload'.",
  "dataLoadingTableTimeReloadDescription":"It establishes how often you want the service to be recharged. It works in conjunction with 'life-reload' and the time is specified in milliseconds. It is necessary to set the value of life-reload to 'true' for this parameter to be activated.",
  "dataExampleTitle":"Example",
  "dataLoadingTemplateContentTitle":"Dynamic content template",
  "dataLoadingTemplateContentParagraph1":"When generating dynamic content loaded from web services SunnieJS has Jquery TMPL to generate data based on HTML structures.",
  "dataLoadingTemplateContentParagraph2":"You can create it as a separate .pug file to include it from the view.pug or include it directly in the component's main file.",
  "dataLoadingTemplateContentParagraph3":"o do this, you must create a template in our HTML with the following format:",
  "dataPaginationTitle":"Pagination",
  "dataPaginationParagraph1":"The pagination of elements with dynamic data loading can be enabled so that the displayed data realizes a real pagination of data, making the data request exclusively of the necessary data.",
  "dataPaginationParagraph2":"It is necessary that the dynamic data have been loaded using <a href='#data-definitions-data-loading-block'>Data Loading</a> defined in the previous section.",
  "dataPaginationParagraph3":"To enable data pagination, you must add the attribute data-has-pagination='true' and then, those attributes that are necessary for paging to be as we want.",
  "dataPaginationTableTH1":"Data Attribute",
  "dataPaginationTableTH2":"Description",
  "dataPaginationTableTH3":"Default",
  "dataPaginationTableTH4":"How to",
  "dataPaginationTableSeviceDataDescription":"URL of the REST service that returns the complete list of data (without paging). It is used to calculate the number of pages in which the data will be divided from the definite items-per-page.",
  "dataPaginationTableMethodDescription":"Type of method with which the service is called. POST or GET",
  "dataPaginationTableTemplateDescription":"ID of the template jquery tmpl on which the obtained data will be loaded. It should be left empty if you do not want to load the data on any template.",
  "dataPaginationTableTargetDescription":"ID of the container on which the template with the data will be loaded. It should be left empty if you do not want to show the data.",
  "dataPaginationTableContainerTargetDescription":"CSS selector of the container on which the pages of the page will be displayed.",
  "dataPaginationTableInitialPageDescription":"Data page that you want to load through the REST service. Leave it to 0 if you wish to load the complete list of data without paging.",
  "dataPaginationTableItemsPerPageDescription":"Number of rows per page that you want to load. Leave it to 0 if you wish to load the complete list of data without paging.",
  "dataPaginationTableAditionalDataDescription":"Additional data that you want to send through the body of the service. Use the 'data' parameter of $.AJAX to send the additional data in JSON format.",
  "dataPaginationTableCallbackDescription":"Name of the additional function to execute once the REST service request has been made and this returns the result. By default, the function receives the data returned by the invoked service. Leave empty if you do not want to execute anything.",
  "dataPaginationTableContentDescription":"Parameters or additional content sent to the defined callback function. Leave empty if it is not necessary to send any additional data.",
  "dataPaginationTableEnableGetParamsDescription":"Enable the service to use the get parameters defined in the URL. It is usually used in conjunction with the filters or search engine to allow a list of data to be sorted or filtered.",
  "dataPaginationTableGetParamsListDescription":"If it is defined, it allows choosing which parameters get affect the list of data that we are loading, thus allowing the choice of what parameters we want to affect the list of data. It should be used together with enable-get-params.",
  "dataPaginationTableRelDescription":"This parameter allows the filters to be grouped so that only those published in said rel apply. From data-filter another data-rel must be defined which makes those filters are linked to this group making those listings of data belonging to the same group apply those filters. Additionally, it can work with the data-get-params-list attribute to define a more limited number of filters. Those filters that belong to a group will be shown in the URL as 'namefilter_nameRel' but when applied to the service it is sent without the rel. Thanks to this you can perform custom data filtering by applying multiple filtering parameters for each list of data without interfering with each other.",
  "dataPaginationTableLiveReloadDescription":"It allows paging to be reloaded periodically to create a real-time service that reloads the data every X milliseconds. The time of the interval is defined in the parameter 'pagination-time-reload'.",
  "dataPaginationTableTimeReloadDescription":"It establishes how often you want the page to be reloaded. It works in conjunction with the 'pagination-life-reload' and the time is specified in milliseconds. It is necessary to set the value of life-reload to 'true' for this parameter to be activated.",
  "dataPaginationExampleParagraph1":"As a general rule, it is only necessary to add the <strong>data-has-pagination='true'</strong> attribute to enable paging since the rest of the necessary values are obtained from the parameters of the <a href = '#data-definitions-data-loading-block'>Data Loading</a>. However, sometimes there are exceptional cases that require that the proper attributes be used.",
  "dataSearchTitle":"Search",
  "dataSearchParagraph1":"It is possible to filter the data of the data loaded in the data listings through a search by words. Thanks to SunnieJS's generic search engine and its parameters, it can be defined because the data model's fields should be searched/filtered.",
  "dataSearchParagraph2":"For example, we can have a list of users loaded by data loading and a search text field in which we can enter the word to search and because fields we want to search (user name, identifier, role, etc ...)",
  "dataSearchParagraph3":"Thanks to the <strong> data-search = 'true' </strong> attribute, we can enable the search engine. Once we activate the search, a series of parameters will be added to the URL of the page and the page will be reloaded in such a way that with the new recharge the data that is displayed will appear filtered by the text, including its paging.",
  "dataSearchParagraph4":"For the search to be carried out properly, to the search input field where we will write our search we must add a series of attributes <strong>data-search-fieldN</strong> where N goes from 1 to N (data-search-field1, data-search-field2, data-search-field3, etc). The value of the fields must match the field of the data model for which we want to search.",
  "dataSearchParagraph5":"When searching, it will rewrite the URL to add the new fields corresponding to the search. For example: <span class = 'text-primary wbba'>http://mydomain.com?query=user&searchField1=id_cllient&searchField2=username&searchField3=rolUser</span>",
  "dataFilterTitle":"Filters",
  "dataFilterParagraph1":"As with the search engine, you can define custom filters to apply to the data lists and the user to choose in each case to use. For example, sort the data in alphabetical order or show only the users with administrator role.",
  "dataFilterParagraph2":"You can define the filters in a personalized way through data attributes and without the need to program any additional ajax calls.",
  "dataFilterParagraph3":"In the same way as the search engine, when a filter is applied, a parameter will be added to the URL and the page will be reloaded with the data filtered/ordered by that filter(s).",
  "dataFilterParagraph4":"To define a filter block it is necessary to add <strong>data='filters'</strong> to the container containing the filters and then, in each filter, add <strong> data-filter='FilterNameFilter'</strong>. In the case of a sort type filter it is necessary to use <strong>data-filter='order'</strong>.",
  "dataFilterParagraph5":"Optionally, you can add a <strong>data-rel</strong> attribute that links that filter to a rel that can be used by the datalists to customize searches by filter groups by having those filters only apply to the defined rel and globally to those datalists that do not have a defined rel or a data-get-params-list.",
  "dataFilterParagraph6":"Finally, each filter must be a link with a <strong>data-filter-value='ValueDelFilter'</strong> that will correspond to the value by which we want to filter the previously defined field.",
  "dataRoleTitle":"Roles",
  "dataRoleParagraph1":"SunnieJS allows you to filter the content shown and the elements displayed through roles. To do this, there are some data attributes that allow defining HTML element level for which roles is visible.",
  "dataRoleTableTH1":"Data Attribute",
  "dataRoleTableTH2":"Description",
  "dataRoleTableTH3":"How to",
  "dataRoleTableContainerAuthRolDescription":"The element is visible for roles less than or equal to the level of the defined role.",
  "dataRoleTableContainerAuthRolEqDescription":"The element is only visible for a role equal to the defined role level",
  "dataRoleParagraph2":"Being the role 1 the role of administrator, and therefore the one that more control over the application has. The role of each user is saved in a cookie when a user logs in and comes from the reesutado returned in the call to the login service.",
  "dataFormTitle":"Forms",
  "dataFormParagraph1":"SunnieJS offers the possibility of automating the sending of forms to rest services, validating them and collecting the response that can be processed in a callback function that performs what we want: show a confirmation message for example.",
  "dataFormTableTH1":"Data Attribute",
  "dataFormTableTH2":"Description",
  "dataFormTableTH3":"How to",
  "dataFormTableContainerToggleDescription":"Enables the validation of forms prior to sending it. The form can not be sent until all the validations are correct. Validation is based on <a href='http://1000hz.github.io/bootstrap-validator/' title='Ir a Bootstrap Validator'>Bootstrap Validator</a>",
  "dataFormTableContainerActionDescription":"REST service to which the data will be sent for processing",
  "dataFormTableContainerMethodDescription":"Invoked service method",
  "dataFormTableContainerCallbackDescription":"Function to execute when the response of the service to which the form data has been sent is received",
  "dataFormTableContainerFormFilterDescription":"If it is enabled, the form will work as a filter and instead of sending the form to the indicated service, the page will be reloaded by applying the inputs as parameters of the URL taking the name of each input as the name of the parameter",
  "dataFormParagraph2":"All data is sent with the name defined in the attribute <span class='text-primary'> name </span> of the field, whether they are inputs, textareas, or any type of form element.",
  "dataFormParagraph3":"In the case of <span class='text-primary'>input[type='file']</span>, they are automatically sent in <span class='text-primary'>String</span> format transformed into <span class='text-primary'>base64</span>."
}