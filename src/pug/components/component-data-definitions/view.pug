mixin component-data-definitions(content)
	div
		h1 Data Definitions

		p Sunnie permite automatizar y dinamizar la carga de datos y la generación de ciertas estructuras de datos mediante data attributes.

		h2(id="data-definitions-data-loading-block") Data Loading
		
		p Permite realizar peticiones a servicios REST, obtener sus datos, estructurarlos mediente plantillas y mostrarlos en un lugar deseado, entre otras cosas.

		p Para habilitar la carga dinámica de datos se debe añadir el atributo data-load="true" y a conntinuación, aquellos atributos que sean necesarios para realizar la operación deseada.

		p A continuación se muestra el listado completo de atributos.

		table(class="table")
			thead
				tr
					th Data-attribute
					th Description
					th Default
					th Uso
			tbody
				tr
					td <strong>service-data</strong>
					td URL del servicio REST del que obtendrá los datos
					td ""
					td data-service-data="/clientes/59/usuarios"

				tr
					td <strong>method</strong>
					td Tipo de método con el que se llama al servicio. POST o GET
					td "GET"
					td data-method = "POST"

				tr
					td <strong>template</strong>
					td ID de la plantilla jquery tmpl sobre la que se cargarán los datos obtenidos. Se debe dejar vacío si no se desea cargar los datos sobre alguna plantilla.
					td ""
					td data-template = "#templateClientes"

				tr
					td <strong>target</strong>
					td ID del contenedor sobre el que se cargará la template con los datos. Se debe dejar vacío si no se desea mostrar los datos.
					td ""
					td data-template = ".table-clientes tbody"

				tr
					td <strong>initial-page</strong>
					td Página de datos que se desea cargar a través del servicio REST. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.
					td "0"
					td data-initial-page= "1"					

				tr
					td <strong>items-per-page</strong>
					td Número de filas por página que se desea cargar. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.
					td "0"
					td data-items-per-page = "10"	

				tr
					td <strong>aditionalData</strong>
					td Datos adicionales que se desea enviar a través del body del servicio. Utiliza el parámetro "data" de $.AJAX para enviar los datos adicionales en formato JSON.
					td ""
					td data-aditionalData = "{cliente : 55 , usuario : 12}"	

				tr
					td <strong>callback</strong>
					td Nombre de la función adicional a ejecutar una vez realizada la petición al servicio REST y este devuelve el resultado. Por defecto la función recibe los datos devueltos por el servicio invocado. Dejar vacío si no se desea ejecutar nada.
					td ""
					td data-callback = "callbackCargaClientes"

				tr
					td <strong>content</strong>
					td Parámetros o contenido adicional enviado a la funcion callback definida. Dejar vacío si no es necesario enviar ningún dato adicional.
					td ""
					td data-content = ""
				tr
					td <strong>enable-get-params</strong>
					td Habilita el servicio para que utilice los parametros get definidos en la URL. Se suele usar en conjunto con los filtros o buscador para permitir que un listado de datos este ordenado o filtrado.
					td ""
					td data-enable-get-params = "true"									

		h3 Ejemplo de Uso
		
		pre 
			| table(class="table table-usersList",data-load="true",data-service-data=api + "/clientes",data-method="GET",data-template="#templateUsersList",data-items-per-page="10",data-initial-page="1",data-target=".table-usersList tbody",data-enable-get-params="true")			
			|     thead
			|         tr
			|             th ID
			|             th Nombre
			|             th Email
			|             th Cliente
			|             th Rol					
			|     tbody


		h2(id="data-definitions-data-pagination-block") Pagination

		p Se puede habilitar la paginación de elementos con carga dinámica de datos para que los datos mostrados realicen una paginación real de datos, realizando la petición de datos exclusivamente de los datos necesarios.

		p Es requisito necesario que los datos din´´amico hayan sido cargados mediante <a href="#data-definitions-data-loading-block">Data Loading</a> definido en el apartado anterior.

		p Para habilitar la paginación de datos se debe añadir el atributo data-has-pagination="true" y ,a conntinuación, aquellos atributos que sean necesarios para que la paginación sea como deseamos.

		table(class="table")
			thead
				tr
					th Data-attribute
					th Description
					th Default
					th Uso
			tbody
				tr
					td <strong>pagination-service-data-all</strong>
					td URL del servicio REST que devuelve el listado completo de datos(sin paginar). Se utiliza para calcular el número de páginas en las que se dividirán los datos a partir de los items-per-page definitidos.
					td data-service-data || ""
					td data-pagination-service-data-all="/clientes/59/usuarios"

				tr
					td <strong>pagination-method</strong>
					td Tipo de método con el que se llama al servicio. POST o GET
					td data-method || ""
					td pagination-data-method = "POST"

				tr
					td <strong>pagination-template</strong>
					td ID de la plantilla jquery tmpl sobre la que se cargarán los datos obtenidos. Se debe dejar vacío si no se desea cargar los datos sobre alguna plantilla.
					td data-template || ""
					td data-pagination-template = "#templateClientes"

				tr
					td <strong>pagination-target</strong>
					td ID del contenedor sobre el que se cargará la template con los datos. Se debe dejar vacío si no se desea mostrar los datos.
					td data-template || ""
					td data-pagination-template = ".table-clientes tbody"				

				tr
					td <strong>pagination-container-target</strong>
					td Selector CSS del contenedor sobre el que se mostrarán las páginas de la paginación
					td ".pagination"
					td data-pagination-container-target = ".container-pagination"

				tr
					td <strong>pagination-initial-page</strong>
					td Página de datos que se desea cargar a través del servicio REST. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.
					td data-initial-page
					td data-initial-page= "1"					

				tr
					td <strong>pagination-items-per-page</strong>
					td Número de filas por página que se desea cargar. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.
					td "data-items-per-page"
					td data-pagination-items-per-page = "10"	

				tr
					td <strong>pagination-aditionalData</strong>
					td Datos adicionales que se desea enviar a través del body del servicio. Utiliza el parámetro "data" de $.AJAX para enviar los datos adicionales en formato JSON.
					td data-aditionalData || ""
					td pagination-data-aditionalData = "{cliente : 55 , usuario : 12}"	

				tr
					td <strong>pagination-callback</strong>
					td Nombre de la función adicional a ejecutar una vez realizada la petición al servicio REST y este devuelve el resultado. Por defecto la función recibe los datos devueltos por el servicio invocado. Dejar vacío si no se desea ejecutar nada.
					td data-callback || ""
					td pagination-data-callback = "callbackCargaClientes"

				tr
					td <strong>pagination-content</strong>
					td Parámetros o contenido adicional enviado a la funcion callback definida. Dejar vacío si no es necesario enviar ningún dato adicional.
					td ""
					td data-pagination-content = ""

				tr
					td <strong>pagination-enable-get-params</strong>
					td Habilita el servicio para que utilice los parametros get definidos en la URL. Se suele usar en conjunto con los filtros o buscador para permitir que un listado de datos este ordenado o filtrado.
					td data-enable-get-params || ""
					td data-enable-get-params = "true"

		h3 Ejemplo de Uso

		p Por norma general, solo es necesario añadir el atributo <strong>data-has-pagination="true"</strong> para habilitar la paginación ya que el resto de valores necesarios los obtiene de los parametros del <a href="#data-definitions-data-loading-block">Data Loading</a>. Sin embargo, en ocasiones hay casos excepcionales que requieren que se utilice los atributos propios. 
		
		pre 
			| table(class="table table-usersList",data-load="true",data-service-data=api + "/clientes",data-method="GET",data-template="#templateUsersList",data-items-per-page="10",data-initial-page="1",data-target=".table-usersList tbody",data-has-pagination="true")			
			|     thead
			|         tr
			|             th ID
			|             th Nombre
			|             th Email
			|             th Cliente
			|             th Rol					
			|     tbody
		h2(id="data-definitions-data-search-block") Search

		p Es posible realizar un filtrado de los datos de los datos cargados en los listados de datos mendiante una busqueda por palabras. Gracias al buscador genério de sunnie y sus parametros, se puede definir porque que campos del modelo de datos debe realizarse la busqueda/filtrado de los datos. 

		P Por ejemplo, podemos disponer de un listado de usuarios cargados mediante data loading y un campo texto de búsqueda en el que podemos introducir la palabra a buscar y porque campos queremos que busque(nombre del usuario, identificador, rol, etc...)

		p Gracias al atributo <strong>data-search="true"</strong> podemmos habilitar el buscador. Una vez activemos la busqueda se añadirá a la URL de la página una serie de parámetros y se recargará la página de tal forma que con la nueva recarga los datos que se muestren aparecerán filtrados por el texto, incluyendo su paginación.

		p Para que la búsqueda se realice de forma adecuada, al campo input de busqueda donde escribiremos nuestra busqueda sdebemos añadir una serie de atributos <strong>data-search-fieldN</strong> donde N va de 1a N(data-search-field1, data-search-field2, data-search-field3, etc). El valor de los campos debe coincidir con el campo del modelo de datos por el que queremos buscar.

		h3 Ejemplo
		pre
			| form
			|    div(class="input-group search-box" data-search="true")
			|       input(type="text",class="form-control",placeholder="Buscar usuario",aria-describedby="buscar_usuario", id="input_searchUser",data-search-field1="username",data-search-field2="email")
			|       label(for="input_searchUser",  class="sr-only") Buscar usuario
			|       span(class="input-group-addon",id="buscar_user")
			|           i(class="fa fa-search icon-2x",aria-hidden="true")		


		p Al buscar, reescribirá la URL para añadir los nuevos campos correspondientes a la búsqueda. Por ejemplo: <span class="text-primary">http://midominio.com?query=usuario&searchField1=id_clliente&searchField2=nombreUsuario&searchField3=rolUsuario</span>

		h2(id="data-definitions-data-filter-block") Filters

		p Al igual que con le buscador, se pueden definir filtros personalizados para aplicar a los listados de datos y que el usuario elija en cada caso cual usar. Por ejemplo, ordenar los datos por orden alfabétco o mostrar solo los usuatios con rol administrador.

		p Se pueden definir los filtros de forma personalizada a través de data atributos y sin necesidad de programar ninguna llamada ajax adicional.

		p Del mismo modo que el buscador, cuando se aplique un filtro se añadirá  un parametro a la URL y se recargará la página con los datos filtrados/ordenados por ese filtro(s).

		p Para definir un bloque de filtros es necesario añadir <strong>data="filters"</strong> al boque contenedor de los filtros y a continuación, en cada filtro añadir <strong>data-filter="NombreDelCampoAFiltrar"</strong>. En el caso de un filtro de tipo ordenación es necesario usar <strong>data-filter="order"</strong>.

		p Por ultimo, cada filtro debe ser un enlace con un <strong>data-filter-value="ValorDelFiltro"</strong> que se corresponderá con el vallor por el que queremos filtrar el campo definido previamente.

		h3 Ejemplo

		pre
			| ul.filterBar.list-inline(data="filters")
			|    li.dropdown(data-filter="order")
			|        a(href="javascript:void(0)",aria-expanded="false",class="dropdown-toggle",data-toggle="dropdown")
			|            span Ordenar por: <span class="filterValue"></span>
			|            span(class="caret")

			|        ul(class="dropdown-menu")
			|            li
			|                a(href="",data-filter-value="") Todos

			|            li
			|                a(href="",data-filter-value="username%20ASC") Nombre Asc

			|            li
			|                a(href="",data-filter-value="username%20DESC") Nombre Desc

			|            li
			|                a(href="",data-filter-value="email%20ASC") Email Asc

			|            li
			|                a(href="",data-filter-value="email%20DESC") Email Desc
				
			|    li.dropdown(data-filter="activo")
			|        a(href="javascript:void(0)",aria-expanded="false",class="dropdown-toggle",data-toggle="dropdown")
			|            span Ordenar por: <span class="filterValue"></span>
			|            span(class="caret")

			|        ul(class="dropdown-menu")
			|            li
			|                a(href="",data-filter-value="") Todos

			|            li
			|                a(href="",data-filter-value="1") Activado

			|            li
			|                a(href="",data-filter-value="0") Desactivado


		h2(id="data-definitions-data-roles-block") Roles

		p Sunnie permite filtrar el contenido mostrado y los elementos mostrados mediante roles. Para ello, existen unos data atributos que permiten definir a nivel de elemento HTML para que roles es visible.

		table(class="table")
			thead
				tr
					th Data-attribute
					th Description
					th Uso
			tbody
				tr
					td <strong>auth-rol</strong>
					td El elemento es visible para roles menores o iguales al nivel del rol definido.
					td data-auth-rol="3"

				tr
					td <strong>auth-rol-eq</strong>
					td El elemento solo es visible para un rol igual al nivel del rol definido
					td data-auth-rol-eq = "2"


		p Siendo el rol 1 el rol de administrador, y por tanto el que mas control sobre la aplicación tiene. El rol de cada usuario es guardado en una cookie cuando un usuario se loguea y proviene del reesutado devuelto en la llamada al servicio de login.			
