{
  "pageTitle":"Definiciones Data",
  "paragraph1":"SunnieJS permite automatizar y dinamizar la carga de datos y la generación de ciertas estructuras de datos mediante data attributes.",
  "dataLoadingTitle":"Data Loading",
  "dataLoadingParagraph1":"Permite realizar peticiones a servicios REST, obtener sus datos, estructurarlos mediente plantillas y mostrarlos en un lugar deseado, entre otras cosas.",
  "dataLoadingParagraph2":"Para habilitar la carga dinámica de datos se debe añadir el atributo data-load='true' y a continuación, aquellos atributos que sean necesarios para realizar la operación deseada.",
  "dataLoadingParagraph3":"A continuación se muestra el listado completo de atributos.",
  "dataLoadingTableTH1":"Atributo Data",
  "dataLoadingTableTH2":"Descripción",
  "dataLoadingTableTH3":"Por defecto",
  "dataLoadingTableTH4":"Uso",
  "dataLoadingTableServiceDataDescription":"URL del servicio REST del que obtendrá los datos",
  "dataLoadingTableMethodDescription":"Tipo de método con el que se llama al servicio. POST o GET",
  "dataLoadingTableTemplateDescription":"ID de la plantilla JSRender sobre la que se cargarán los datos obtenidos. Se debe dejar vacío si no se desea cargar los datos sobre alguna plantilla.",
  "dataLoadingTableTargetDescription":"ID del contenedor sobre el que se cargará la template con los datos. Se debe dejar vacío si no se desea mostrar los datos.",
  "dataLoadingTableInitialPageDescription":"Página de datos que se desea cargar a través del servicio REST. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.",
  "dataLoadingTableItemsPerPageDescription":"Número de filas por página que se desea cargar. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.",
  "dataLoadingTableAditionalDataDescription":"Datos adicionales que se desea enviar a través del body del servicio. Utiliza el parámetro 'data' de $.AJAX para enviar los datos adicionales en formato JSON.",
  "dataLoadingTableCallbackDescription":"Nombre de la función adicional a ejecutar una vez realizada la petición al servicio REST y este devuelve el resultado. Por defecto la función recibe los datos devueltos por el servicio invocado. Dejar vacío si no se desea ejecutar nada.",
  "dataLoadingTableContentDescription":"Parámetros o contenido adicional enviado a la funcion callback definida. Dejar vacío si no es necesario enviar ningún dato adicional.",
  "dataLoadingTableEnableGetParamsDescription":"Habilita el servicio para que utilice los parámetros get definidos en la URL. Se suele usar en conjunto con los filtros o buscador para permitir que un listado de datos este ordenado o filtrado.",
  "dataLoadingTableGetParamsListDescription":"Si es definido permite elegir que parámetros get afectan al listado de datos que estamos cargando, permitiendo de esta manera la elección de qué parámetros queremos que afecten al listado de datos. Se debe usar junto con enable-get-params.",
  "dataLoadingTableRelDescription":"Este parámetro permite agrupar los filtros para que sólo le apliquen aquellos publicados en dicho rel. Desde data-filter se debe definir otro data-rel el cual hace que esos filtros queden vinculados a dicho grupo haciendo que aquellos listados de datos que pertenezcan al mismo grupo apliquen esos filtros. Adicionalmente, puede funciona con el atributo data-get-params-list para definir un número más limitado de filtros. Aquellos filtros que pertenezcan al un grupo se mostrarán en la URL como 'nombrefiltro_nombreRel' pero al aplicarlo al servicio se envía sin el rel. Gracias a esto podrás realizar filtrados de datos personalizados aplicando múltiples parámetros de filtrado por cada listado de datos sin que interfieran entre ellos.",
  "dataLoadingTableLiveReloadDescription":"Permite al servicio recargarse periódicamente para crear un servicio en tiempo real que recarga los datos cada X milisegundos. El tiempo del intervalo viene definido en el parámetro 'time-reload'.",
  "dataLoadingTableTimeReloadDescription":"Establece cada cuanto tiempo se desea que se recargue el servicio. Funciona en conjunto al 'life-reload' y el tiempo está especificado en milisegundos. Es necesario establacer el valor de life-reload a 'true' para que este parámetro se active.",
  "dataLoadingTableCacheDescription":"Permite almacenar la petición al servicio en sessionStorage. Si el servicio invocado ya ha sido invocado previamente se obtiene el resultado de sessionStorage, si no ha sido invocado se realiza la petición ordinaria.",  
  "dataLoadingTableNoReloadDescription":"Si esta activo, cualquier recarga de página que genere el componente a través de las configuraciones data las convertirá en una reescritura de la URL sin recarga de página. Si algún filtro tiene también habilitado el atributo, este refrescará el contenido del componente sin recargar la página siempre y cuando el filtro que se haya modificado/aplicado sea uno de los que afecte al componente(definido a través del data-get-params-list o simplemente habilitandoque le afecte todos).",
  "dataExampleTitle":"Ejemplo de Uso",
  "dataLoadingTemplateContentTitle":"Plantilla de contenido dinámico",
  "dataLoadingTemplateContentParagraph1":"A la hora de generar contenido dinámico cargado desde servicios web SunnieJS dispone de JSRender para generar los datos en base a estructuras HTML.",
  "dataLoadingTemplateContentParagraph2":"Puedes crearla como un archivo .pug aparte para incluirlo desde el view.pug o incluirlo directamente en el archivo principal del componente.",
  "dataLoadingTemplateContentParagraph3":"Para ello, se debe crear una plantilla en nuestro HTML con el siguiente formato:",
  "dataPaginationTitle":"Paginación",
  "dataPaginationParagraph1":"Se puede habilitar la paginación de elementos con carga dinámica de datos para que los datos mostrados realicen una paginación real de datos, realizando la petición de datos exclusivamente de los datos necesarios.",
  "dataPaginationParagraph2":"Es requisito necesario que los datos dinámico hayan sido cargados mediante <a href='#data-definitions-data-loading-block'>Data Loading</a> definido en el apartado anterior.",
  "dataPaginationParagraph3":"Para habilitar la paginación de datos se debe añadir el atributo data-has-pagination='true' y ,a conntinuación, aquellos atributos que sean necesarios para que la paginación sea como deseamos.",
  "dataPaginationTableTH1":"Atributo Data",
  "dataPaginationTableTH2":"Descripción",
  "dataPaginationTableTH3":"Por defecto",
  "dataPaginationTableTH4":"Uso",
  "dataPaginationTableSeviceDataDescription":"URL del servicio REST que devuelve el listado completo de datos(sin paginar). Se utiliza para calcular el número de páginas en las que se dividirán los datos a partir de los items-per-page definitidos.",
  "dataPaginationTableMethodDescription":"Tipo de método con el que se llama al servicio. POST o GET",
  "dataPaginationTableTemplateDescription":"ID de la plantilla JSRender sobre la que se cargarán los datos obtenidos. Se debe dejar vacío si no se desea cargar los datos sobre alguna plantilla.",
  "dataPaginationTableTargetDescription":"ID del contenedor sobre el que se cargará la template con los datos. Se debe dejar vacío si no se desea mostrar los datos.",
  "dataPaginationTableContainerTargetDescription":"Selector CSS del contenedor sobre el que se mostrarán las páginas de la paginación",
  "dataPaginationTableInitialPageDescription":"Página de datos que se desea cargar a través del servicio REST. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.",
  "dataPaginationTableItemsPerPageDescription":"Número de filas por página que se desea cargar. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.",
  "dataPaginationTableAditionalDataDescription":"Datos adicionales que se desea enviar a través del body del servicio. Utiliza el parámetro 'data' de $.AJAX para enviar los datos adicionales en formato JSON.",
  "dataPaginationTableCallbackDescription":"Nombre de la función adicional a ejecutar una vez realizada la petición al servicio REST y este devuelve el resultado. Por defecto la función recibe los datos devueltos por el servicio invocado. Dejar vacío si no se desea ejecutar nada.",
  "dataPaginationTableContentDescription":"Parámetros o contenido adicional enviado a la funcion callback definida. Dejar vacío si no es necesario enviar ningún dato adicional.",
  "dataPaginationTableEnableGetParamsDescription":"Habilita el servicio para que utilice los parámetros get definidos en la URL. Se suele usar en conjunto con los filtros o buscador para permitir que un listado de datos este ordenado o filtrado.",
  "dataPaginationTableGetParamsListDescription":"Si es definido permite elegir que parámetros get afectan al listado de datos que estamos cargando, permitiendo de esta manera la elección de qué parámetros queremos que afecten al listado de datos. Se debe usar junto con enable-get-params.",
  "dataPaginationTableRelDescription":"Este parámetro permite agrupar los filtros para que sólo le apliquen aquellos publicados en dicho rel. Desde data-filter se debe definir otro data-rel el cual hace que esos filtros queden vinculados a dicho grupo haciendo que aquellos listados de datos que pertenezcan al mismo grupo apliquen esos filtros. Adicionalmente, puede funciona con el atributo data-get-params-list para definir un número más limitado de filtros. Aquellos filtros que pertenezcan al un grupo se mostrarán en la URL como 'nombrefiltro_nombreRel' pero al aplicarlo al servicio se envía sin el rel. Gracias a esto podrás realizar filtrados de datos personalizados aplicando múltiples parámetros de filtrado por cada listado de datos sin que interfieran entre ellos.",
  "dataPaginationTableLiveReloadDescription":"Permite a la paginación recargarse periódicamente para crear un servicio en tiempo real que recarga los datos cada X milisegundos. El tiempo del intervalo viene definido en el parámetro 'pagination-time-reload'.",
  "dataPaginationTableTimeReloadDescription":"Establece cada cuanto tiempo se desea que se recargue la paginación. Funciona en conjunto al 'pagination-life-reload' y el tiempo está especificado en milisegundos. Es necesario establacer el valor de life-reload a 'true' para que este parámetro se active.",
  "dataPaginationTableNoReloadDescription":"Si esta activo, al pulsar sobre una página ya no se recargará la página sino que reescribirá la URL y los componentes que se vean afectados por dicha páginación recargarán sus datos sin recargar la página.",
  "dataPaginationExampleParagraph1":"Por norma general, solo es necesario añadir el atributo <strong>data-has-pagination='true'</strong> para habilitar la paginación ya que el resto de valores necesarios los obtiene de los parámetros del <a href='#data-definitions-data-loading-block'>Data Loading</a>. Sin embargo, en ocasiones hay casos excepcionales que requieren que se utilice los atributos propios.",
  "dataSearchTitle":"Búsqueda",
  "dataSearchParagraph1":"Es posible realizar un filtrado de los datos de los datos cargados en los listados de datos mendiante una busqueda por palabras. Gracias al buscador genério de SunnieJS y sus parámetros, se puede definir porque que campos del modelo de datos debe realizarse la busqueda/filtrado de los datos.",
  "dataSearchParagraph2":"Por ejemplo, podemos disponer de un listado de usuarios cargados mediante data loading y un campo texto de búsqueda en el que podemos introducir la palabra a buscar y porque campos queremos que busque(nombre del usuario, identificador, rol, etc...)",
  "dataSearchParagraph3":"Gracias al atributo <strong>data-search='true'</strong> podemmos habilitar el buscador. Una vez activemos la busqueda se añadirá a la URL de la página una serie de parámetros y se recargará la página de tal forma que con la nueva recarga los datos que se muestren aparecerán filtrados por el texto, incluyendo su paginación.",
  "dataSearchParagraph4":"Para que la búsqueda se realice de forma adecuada, al campo input de busqueda donde escribiremos nuestra busqueda sdebemos añadir una serie de atributos <strong>data-search-fieldN</strong> donde N va de 1a N(data-search-field1, data-search-field2, data-search-field3, etc). El valor de los campos debe coincidir con el campo del modelo de datos por el que queremos buscar.",
  "dataSearchParagraph5":"Al buscar, reescribirá la URL para añadir los nuevos campos correspondientes a la búsqueda. Por ejemplo: <span class='text-primary wbba'>http://midominio.com?query=usuario&searchField1=id_clliente&searchField2=nombreUsuario&searchField3=rolUsuario</span>",
  "dataFilterTitle":"Filtros",
  "dataFilterParagraph1":"Al igual que con le buscador, se pueden definir filtros personalizados para aplicar a los listados de datos y que el usuario elija en cada caso cual usar. Por ejemplo, ordenar los datos por orden alfabétco o mostrar solo los usuatios con rol administrador.",
  "dataFilterParagraph2":"Se pueden definir los filtros de forma personalizada a través de data atributos y sin necesidad de programar ninguna llamada ajax adicional.",
  "dataFilterParagraph3":"Del mismo modo que el buscador, cuando se aplique un filtro se añadirá un parámetro a la URL y se recargará la página con los datos filtrados/ordenados por ese filtro(s).",
  "dataFilterParagraph4":"Para definir un bloque de filtros es necesario añadir <strong>data='filters'</strong> al boque contenedor de los filtros y a continuación, en cada filtro añadir <strong>data-filter='NombreDelCampoAFiltrar'</strong>. En el caso de un filtro de tipo ordenación es necesario usar <strong>data-filter='order'</strong>.",
  "dataFilterParagraph5":"Opcionalmente, se puede añadir un atributo <strong>data-rel</strong> que vincula ese filtro a un rel que podrá  ser usado por los datalist para personalizar las búsquedas por grupos de filtros haciendo que esos filtros solo se aplique al rel definido y de forma global a aquellos datalist que no tengan un rel definido ni un data-get-params-list.",
  "dataFilterParagraph6":"Por ultimo, cada filtro debe ser un enlace con un <strong>data-filter-value='ValorDelFiltro'</strong> que se corresponderá con el vallor por el que queremos filtrar el campo definido previamente.",
  "dataRoleTitle":"Roles",
  "dataRoleParagraph1":"SunnieJS permite filtrar el contenido mostrado y los elementos mostrados mediante roles. Para ello, existen unos data atributos que permiten definir a nivel de elemento HTML para que roles es visible.",
  "dataRoleTableTH1":"Atributo Data",
  "dataRoleTableTH2":"Descripción",
  "dataRoleTableTH3":"Uso",
  "dataRoleTableContainerAuthRolDescription":"El elemento es visible para roles menores o iguales al nivel del rol definido.",
  "dataRoleTableContainerAuthRolEqDescription":"El elemento solo es visible para un rol igual al nivel del rol definido",
  "dataRoleParagraph2":"Siendo el rol 1 el rol de administrador, y por tanto el que mas control sobre la aplicación tiene. El rol de cada usuario es guardado en una cookie cuando un usuario se loguea y proviene del reesutado devuelto en la llamada al servicio de login.",
  "dataFormTitle":"Formularios",
  "dataFormParagraph1":"SunnieJS ofrece la posibilidad de automatizar el envío de formularios a servicios rest, validarlos y recoger la respuesta que podrá procesar en una función callback que realice lo que deseemos: mostrar un mensaje de confirmación por ejemplo.",
  "dataFormTableTH1":"Atributo Data",
  "dataFormTableTH2":"Descripción",
  "dataFormTableTH3":"Uso",
  "dataFormTableContainerToggleDescription":"Habilita la validación de formularios previa al envío del mismo. El formulario no podrá ser enviado hasta que todas las validaciones sea correctas. La validación está basada en <a href='http://1000hz.github.io/bootstrap-validator/'' title='Ir a Bootstrap Validator'>Bootstrap Validator</a>",
  "dataFormTableContainerActionDescription":"Servicio REST al que se eenviarán los datos para su procesamiento",
  "dataFormTableContainerMethodDescription":"Método del servicio invocado",
  "dataFormTableContainerCallbackDescription":"Función a ejecutar cuando se reciba la respuesta del servicio al que se han enviado los datos del formulario",
  "dataFormTableContainerFormFilterDescription":"Si se habilita, el formulariio funcionará como un filtro y en vez de enviar el formulario al servicio indicado se recargará la pagina aplicando los inputs como parametros de la URL tomando como nombre de parametro el name de cada input",
  "dataFormTableContainerNoReloadDescription":"Si esta activo y el formulario está funcionando en modo form-filter, al aplicar el filtro y pulsar sobre el botón de enviar no se recargará la página. En su lugar se aplicarán los parámetros del formulario a la URL y aquellos componentes que se vean afectados por dichos parámetros recargarán sus datos si recargar la página.",
  "dataFormParagraph2":"Todos los datos se envían con el nombre definido en el atributo <span class='text-primary'>name</span> del campo, ya sean inputs, textareas, o cuaquier tipo de elemento de formulario.",
  "dataFormParagraph3":"En el caso de los <span class='text-primary'>input[type='file']</span>, de forma automática se envían en formato <span class='text-primary'>String</span> transformado en <span class='text-primary'>base64</span>.",
  "dataEventParagraph1":"Existe la posibilidad de agregar eventos a ciertos elementos para que ocurra ciertas acciones sin necesidad de programar todo el código del evento en javascript. Data Event permite actuar sobre elemento externos al ocurrir un evento sobre el elemento que estamos definiendo.",
  "dataEventTableTH1":"Atributo",
  "dataEventTableTH2":"Descripción",
  "dataEventTableTH3":"Uso",
  "dataEventTableTH4":"Valores",
  "dataEventTableContainerEventDescription":"Define el evento del elemento que lanza la acción",
  "dataEventTableContainerEventActionDescription":"Acción por defecto predefinida a ejecutar cuando ocurra el evento",
  "dataEventTableContainerEventActionDescriptionOption1":"recarga los datos definidos en el data-load del target. Ejecuta un dataList(target).",
  "dataEventTableContainerEventActionDescriptionOption2":"Muestra el elemento si estaba oculto. Si se usa en conjunto con data-event-value, el target solo se mostrará para el valor definido y se ocultará para cualquier otro valor.",
  "dataEventTableContainerEventActionDescriptionOption3":"Oculta el elemento si estaba mostrado. Si se usa en conjunto con data-event-value, el target solo se ocultará para el valor definido y se mostrará para cualquier otro valor.",
  "dataEventTableContainerEventActionDescriptionOption4":"Envía el formulario si el elemento sobre el que se aplica está dentro de un formulario",
  "dataEventTableContainerEventTargetDescription":"Al ocurrir el evento previamente definido, la acción definida aplicará sobre este elemento",
  "dataEventTableContainerEventValueDescription":"Si es definido, el evento solo ejecutará la acción si el valor del campo(aplicable a elementos de formulario) se corresponde con el definido. También es posible definir mas de un valor separados por ,",
  "dataParentEventParagraph1":"A diferencia de Event, Parent Event tiene en cuenta un evento ocurrido en un elemento ajeno para ejecutar la acción sobre si mismo.",
  "dataParentEventTableTH1":"Atributo",
  "dataParentEventTableTH2":"Descripción",
  "dataParentEventTableTH3":"Uso",
  "dataParentEventTableTH4":"Valores",
  "dataParentEventTableContainerEventDescription":"Define el evento del elemento ajeno que lanzará la acción",
  "dataParentEventTableContainerEventActionDescription":"Acción por defecto predefinida a ejecutar cuando ocurra el evento. La acción se ejecuta sobre el el propio elemento.",
  "dataParentEventTableContainerEventActionDescriptionOption1":"recarga los datos definidos en el data-load del propio elemento. Ejecuta un dataList($(this)).",
  "dataParentEventTableContainerEventActionDescriptionOption2":"Muestra el elemento si estaba oculto. Si se usa en conjunto con data-parent-event-value, el elemento solo se mostrará para el valor definido y se ocultará para cualquier otro valor.",
  "dataParentEventTableContainerEventActionDescriptionOption3":"Oculta el elemento si estaba mostrado. Si se usa en conjunto con data-parent-event-value, el elemento solo se ocultará para el valor definido y se mostrará para cualquier otro valor.",
  "dataParentEventTableContainerEventActionDescriptionOption4":"Envía el formulario si el elemento sobre el que se aplica está dentro de un formulario",
  "dataParentEventTableContainerEventTargetDescription":"El evento definido será vinculado a este elemento. Al ocurrir el evento sobre este elemento ejecutará la acción sobre el elemento original.",
  "dataParentEventTableContainerEventValueDescription":"Si es definido, el evento solo ejecutará la acción si el valor del campo(aplicable a elementos de formulario) se corresponde con el definido. Tambien es posible definir más de un valor separado por ,"

}