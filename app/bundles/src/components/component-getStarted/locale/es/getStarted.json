{
  "pageTitle":"Get Started",
  "paragraph1":"SunnieJS está disponible para su descarga a través del repositorio de git <a href='https://github.com/SergioGB-work/sunnie' target='_blank' rel='noreferrer'>https://github.com/SergioGB-work/SunnieJS</a>.",
  "paragraph2":"Os recomendamos descargar la <span class='text-primary'>última release disponible</span> de la versión 3 (release/3.X.X)",
  "installationTitle":"Instalación",
  "installationParagraph1":"Lo primero que debes hacer una vez descargado el código sobre una carpeta es <span class='text-primary'>instalar el proyecto</span>. Al ser un proyecto tipo <span class='text-primary'>npm</span> lo único que debes hacer es ejecutar desde la <span class='text-primary'>consola de administración(CMD)</span>, situándote sobre la carpeta del proyecto:",
  "installationParagraph2":"Una vez haya terminado la instalación ya estarás preparado para comenzar a trabajar con SunnieJS.",
  "initServerTitle":"Arrancando el Servidor",
  "initServerParagraph1":"SunnieJS esta construido en base a <span class='text-primary'>Gulp</span> para la automatización de tareas y <span class='text-primary'>Node</span> para la gestión de paquetes y servidor de aplicaciones.",
  "initServerParagraph2":"Si deseas <span class='text-primary'>arrancar</span> el <span class='text-primary'>servidor</span> tan solo debes ejecutar el siguiente comando:",
  "initServerParagraph3":"Esta tarea compilará el proyecto y levantará dos servidores locales, uno de producción y otro de desarrollo, sobre las urls <span class='text-primary'>http://localhost:8080/default/es</span> y <span class='text-primary'>http://localhost:8083/default/es</span>",
  "initServerParagraph4":"Gracias a Gulp, SunnieJS dispone de una serie de tareas automatizadas que nos permiten realizar las diferentes operaciones de compilación de una manera muy simple.",
  "initServerParagraph5":"La estructura de todas las tareas que lanzaremos desde CMD es <span class='text-primary'>gulp nombreTarea</span> donde nombre tarea será el nombre de la tarea gulp que ya tenemos precreada para compilara, por ejemplo, el CSS o JS de nuestro proyecto.",
  "initServerParagraph6":"A continuación se muestra el listado principal de <span class='text-primary'>tareas disponibles</span>:",
  "initServerTableTH1":"Nombre Tarea",
  "initServerTableTH2":"Descripción",
  "initServerTableTH3":"Uso",
  "initServerTableContainerDeployDescription":"Tarea general de compilación. Realiza una compilación completa del proyecto, incluyendo todos sus archivos: JS, CSS, HTML, etc...",
  "initServerTableContainerDeployCSSDescription":"Compila sólo el CSS del proyecto, transformando el SASS en código CSS limpio y minificado",
  "initServerTableContainerDeployJSDescription":"Compila sólo el JS del proyecto, transformando el javascript en código js limpio y minificado",
  "initServerTableContainerDeployPUGDescription":"Compila solo el PUG del proyecto, transformando el pug en código HTML limpio y aplicando la internacionalización de variables si es que la hubiese.",
  "initServerParagraph7":"El objetivo de las tareas anteriores es <span class='text-primary'>agilizar el trabajo</span> de cualquier desarrollador permitiendole compilar solo una parte del proyecto lo que conlleva un tiempo mucho menor de <span class='text-primary'>compilación</span> y una mayor <span class='text-primary'>agilidad</span> de desarrollo.",
  "initServerParagraph8":"Además, al ser multisite, existen otra seríe de variables que podemos añadir a estos códigos para ejecutar las tareas de forma aún mas eficiente, por ejemplo, compilando solo un site o indicando que solo deseamos compilar el entorno de desarrollo, sin llevarlo aún a producción.",
  "initServerParagraph9":"Para ello podemos usar las siguientes variables:",
  "structureProjectTitle":"Estructura de proyecto",
  "structureProjectParagraph1":"Todo proyecto desarrollado con SunnieJS tiene una estructura similar y prefijada.",
  "layoutsParagraph1":"La carpeta layouts contiene todas las layouts creadas en el portal para su uso a la hora de definir la distribución del contenido de una página. Cada layout se crea en base a una misma estructura y todo el detalle de la misma se puede ver en la <a href='./layouts.html' title='Ir a Layouts'>sección de layouts</a> de este portal.",
  "fragmentsParagraph1":"Un fragment es un <span class='text-primary'>trozo de código reutilizable</span> entre diferentes componentes. Por ejemplo, un botón. En esta carpeta se deben crear lo diferentes fragmentos que se vayan a utilizar en el portal.",
  "varServerTableTH1":"Nombre variable",
  "envVar1":"Si no definimos dicha variable la compilación se realizará en producción. Si entorno toma el valor dev entonces el proyecto solo será compilado en desarrollo.",
  "envVar2":"Donde site es el nombre del site definido(nombre de su carpeta). Si no es definido, compilará todos los sites del servidor.",
  "envVar3":"Donde page es el nombre de la página o páginas(separadas por ,) a compilar(campo id en el sitemap del site). Si no es definido, compilará todas las página del site. Este parámetro es necesario usarlo junto a --site.",
  "initApiTitle":"Arrancando la API",
  "initApiParagraph1":"SunnieJS 3 dispone de una completa API para la gestión del portal. A través de ella podrás gestionar los sites, las páginas y los componentes, pudiendo añadir nuevos elementos, editarlos o borrarlos o incluso publicar el site de desarrollo y todo a través del nuevo CMS que incorpora.",
  "initApiParagraph2":"Para arrancar la API y poder empezar a usar el CMS es suficiente con lanzar la siguiente tarea de gulp:",
  "initApiParagraph3":"Una vez arrancada, el CMS estará disponible en el entorno de desarrollo y todos los cambios que se vayan realizando solo tendrán validez en dicho entorno. En el momento que el usuario desee publicar esos cambios en en entorno de producción exite la opción de Publicar en el CMS que traasladará todos esos cambios al otro entorno.",
  "structureProjectApp":"código fuente del proyecto. Aquí es donde un desarrollador debe trabajar",
  "structureProjectServer":"código fuente de la API del CMS",
  "structureProjectNodeModules":"carpeta que almacena todos los módulos de node instalados en el proyecto",
  "structureProjectParagraph2":"A su vez, app dispone de otra serie de subcarpetas:",
  "structureProjectBundles":"es el código CORE de la aplicación. A partir de él todos los elementos del sistema se extenderán. Aquello que no haya sido redefinido en plugins será utilizado tal cual desde bundles. El código de esta carpeta no debe ser modificado.",
  "structureProjectPlugins":"esta carpeta alberga todos los nuevos elementos que se creen, ya sean sites, componentes, temas de apariencia, etc... Aquí es donde los desarrolladores deben trabajar para extender la funcionalidad.",
  "structureProjectDevelopment":"código final con herramientas de desarrollo compilado. El resultado solo es html, css y javascript distribuidos en carpetas de idiomas y sites(1 carpeta por cad site y a su vez 1 carpeta por cada idioma definido en el portal) y es aquí donde apunta el localhost:8083. A diferencia de public, esta carpeta contiene todo el código generado para el CMS y muestra las herramientas de edición del CMS.",
  "structureProjectPublic":"código final del proyecto compilado. El resultado solo es html, css y javascript distribuidos en carpetas de idiomas y sites(1 carpeta por cad site y a su vez 1 carpeta por cada idioma definido en el portal) y es aquí donde apunta el localhost:8080.",
  "structureProjectBuild":"código precompilado. Es una carpeta con código precompilado previo al código final de public. Aqui se genera el código final, resultado de la mezcla de bundles y plugins",
  "structureProjectSitesParagraph":"La carpeta sites contiene todos los sites creados en el portal. Cada site está compuesto de N páginas y cada página a su vez está compuesta por N componentes colocados bajo una cierta distribución física. Tanto los componentes, las layouts, fragments y themes son compartidos por todos los sites de forma transversal. Cada site a su vez dispone de su propio sitemap con una cierta configuración y de sus propias traducciones genéricas.",
  "structureProjectComponentsParagraph":"La carpeta components contendrá todos aquellos componentes que formarán las páginas. Un componente es una pieza funcional e independiente que realiza cierta función dentro de un portal como una agenda, un carrusel de fotos o algo tan simple como un contenido HTML plano. Para saber más sobre componentes visita su <a href='./components' title='Ir a componentes'>sección</a>.",
  "structureProjectThemesParagraph":"La carpeta themes contiene todos los temas de apariencia disponibles en el portal. Un tema de apariencia es la pieza que le da estructura a la página a nivel general(cabecera, menu, footer, etc...), contiene los estilos y las funcionalidades javascript transversales del site."
}