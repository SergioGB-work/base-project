{
  "pageTitle":"Get Started",
  "paragraph1":"SunnieJS is available for download through the git repository <a href='https://github.com/SergioGB-work/sunnie' target='_blank' rel='noreferrer'>https://github.com/SergioGB-work/SunnieJS</a>",
  "paragraph2":"We recommend you download the <span class='text-primary'>latest release available</span> from version 3 (release/3.X.X)",
  "installationTitle":"Installation",
  "installationParagraph1":"The first thing to do once you have downloaded the code on a folder is <span class='text-primary'>install the project</span>. Being a project type <span class='text-primary'>npm</span>, all you have to do is run from the <span class='text-primary'>administration console(CMD)</span>, locating you on the project folder:",
  "installationParagraph2":"Once you have finished the installation you will be ready to start working with SunnieJS.",
  "initServerTitle":"Running the Server",
  "initServerParagraph1":"SunnieJS is built based on <span class='text-primary'>Gulp</span> for task automation and <span class='text-primary'>Node</span> for package management and server Applications.",
  "initServerParagraph2":"If you want <span class='text-primary'>to start</span> the <span class='text-primary'>server</span> you just have to execute the following command:",
  "initServerParagraph3":"This task will compile the project and will raise two local servers, one for production and the other one for development, on the urls <span class='text-primary'>http://localhost:8080/default/en</span> and <span class='text-primary'>http://localhost:8083/default/en</span>",
  "initServerParagraph4":"Thanks to Gulp, SunnieJS has a series of automated tasks that allow us to perform the different compilation operations in a very simple way.",
  "initServerParagraph5":"The structure of all the tasks that we will launch from CMD is <span class='text-primary'>gulp nombreTarea</span> where name task will be the name of the gulp task that we already have pre-created to compile, for example, the CSS or JS of our project.",
  "initServerParagraph6":"Below is the main list of <span class = 'text-primary'> tasks available </ span>:",
  "initServerTableTH1":"Task name",
  "initServerTableTH2":"Description",
  "initServerTableTH3":"How to",
  "initServerTableContainerDeployDescription":"General compilation task. Make a complete compilation of the project, including all its files: JS, CSS, HTML, etc...",
  "initServerTableContainerDeployCSSDescription":"Compile only the CSS of the project, transforming the SASS into clean and minified CSS code",
  "initServerTableContainerDeployJSDescription":"Compile only the JS of the project, transforming the javascript into clean and minified js code",
  "initServerTableContainerDeployPUGDescription":"Compile only the PUG of the project, transforming the pug into clean HTML code and applying the internationalization of variables if there is one.",
  "initServerParagraph7":"The objective of the previous tasks is to <span class='text-primary'>streamline the work</span> of any developer by allowing them to compile only one part of the project, which entails a much shorter time of <span class='text-primary'>compilation</span> and a greater <span class='text-primary'>agility</span> of development.",
  "structureProjectTitle":"Project Structure",
  "structureProjectParagraph1":"Every project developed with SunnieJS has a similar and predefined structure.",
  "structureProjectLis11":"source code of the project. This is where a developer should work.",
  "structureProjectLis12":"precompiled code. It is a folder with precompiled code prior to the public's final code. It lacks the application of internationalization.",
  "structureProjectLis13":"final code of the compiled project. The result is only html, css and javascript distributed in language folders (1 for each language defined in the portal) and this is where the localhost points.",
  "structureProjectLis14":"folder that stores all the node modules installed in the project.",
  "structureProjectParagraph2":"Additionally, it is necessary to know the internal structure of the SRC folder since it is in it where every developer must work.",
  "structureProjectParagraph3":"The basic structure of the SRC folder is as follows:",
  "structureProjectLis21":"It contains all the code written in pug of components, layouts, pages, etc. that will later be transformed into HTML",
  "structureProjectLis22":"It contains all the generic styles of the portal written in SASS that will later be transformed into CSS.",
  "structureProjectLis23":"It contains all the generic javascript of the portal.",
  "structureProjectLis24":"It contains all the images of the portal.",
  "pugParagraph1":"The pug folder contains a series of subfolders and files with predefined objectives.",
  "pugParagraph2":"In this folder is where <span class='text-primary'>should be created</span> the different <span class='text-primary'>pages</span> that will make up the definitive web portal and about which will be composed the content that each one carries.",
  "pugParagraph3":"In the <a href='./pages.html' title='Ir a Pages'>section of pages</a> you can see more detailed information on how a page is created and what its structure is.",
  "componentsParagraph1":"The components folder contains all the components created in the portal for use in the pages. Each component is created based on the same structure and all the details of it can be seen in the <a href='./components.html' title='Ir a Componentes'>components section</a> of this portal.",
  "layoutsParagraph1":"The layouts folder contains all the layouts created in the portal for use when defining the distribution of the content of a page. Each layout is created based on the same structure and all the detail of it can be seen in the <a href='./layouts.html' title='Ir a Layouts'>section of layouts</a> of this portal.",
  "fragmentsParagraph1":"A fragment is a <span class = 'text-primary'>piece of reusable code</span> between different components. For example, a button. In this folder you must create the different fragments that will be used in the portal.",
  "localeParagraph1":"Contains the <span class='text-primary'>generic translations</span> of the portal saved in .json files",
  "templatesParagraph1":"It contains the different templates from which the different elements that make up the portal will be created: pages, components, fragments, manners, errors, etc...",
  "sassParagraph1":"The sass folder contains all the generic styles of the portal. SunnieJS already has a series of predefined styles that the developer must adapt to the final style of each portal.",
  "sassParagraph2":"unnieJS uses <span class = 'text-primary'>Bootstrap 3</span> as the basis for the organization and layout of your entire portal. That is why it is recommended to modify as little as possible the default styles that SunnieJS brings and to extend from them from the file <span class='text-primary'>custom.scss</span>",
  "sassParagraph3":"Additionally, from <span class='text-primary'>base/variables</span> are all the <span class='text-primary'> generic variables </span> of the portal that can be used to modify their style without need to modify any line of code, thus achieving a <span class = 'text-primary'>clean and reduced code</span>, which penalizes as little as possible the loading of the portal.",
  "sassParagraph4":"SunnieJS incorporates the iconic font <a href='http://fontawesome.io/icons/'' target='_blank' title='Go to Font Awesome' rel='noreferrer'>Font Awesome</a> for use within the portal. Likewise, any other iconic font can be used.",
  "javascriptParagraph1":"The javascript directory is subdivided in turn into other directories, each with a specific purpose.",
  "javascriptList11":"They are libraries that must be loaded first because other libraries can have dependencies with them. For example: jQuery",
  "javascriptList12":"They are the generic libraries of the portal.",
  "javascriptList13":"They are libraries or JS code that must be executed in the initial load of the portal from the <span class='text-primary'>head</span>, without waiting for anything. They are written in pure javascript",
  "javascriptList14":"Main javascript file. It contains all the generic functions of the portal defined in the <a href='./js-functions.html' title='Go to JS Functions'>javascript page</a>.",
  "javascriptParagraph2":"As a general rule, when you want to add a new library, you must add it to the libs folder.",
  "javascriptParagraph3":"It is not necessary to add the tag <span class = 'text-primary'>&lt;script&gt;</span> in the header or footer of the portal because SunnieJS <span class = 'text-primary'>compiles</span> automatically the libraries that are in these folders in an order to then generate a single <span class = 'text-primary'>miniscript javascript file</span> with all the code.",
  "imagesParagraph1":"This folder serves as an image store. All the images added here will go directly to the folder <span class = 'text-primary'>public</span> within its corresponding folder of images."
}