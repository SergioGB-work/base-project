{
  "pageTitle":"Get Started",
  "paragraph1":"SunnieJS is available for download through the git repository <a href='https://github.com/SergioGB-work/sunnie' target='_blank' rel='noreferrer'>https://github.com/SergioGB-work/SunnieJS</a>",
  "paragraph2":"We recommend you download the <span class='text-primary'>latest release available</span> from version 3 (release/3.X.X)",
  "installationTitle":"Installation",
  "installationParagraph1":"The first thing to do once you have downloaded the code on a folder is <span class='text-primary'>install the project</span>. Being a project type <span class='text-primary'>npm</span>, all you have to do is run from the <span class='text-primary'>administration console(CMD)</span>, locating you on the project folder:",
  "installationParagraph2":"Once you have finished the installation you will be ready to start working with SunnieJS.",
  "initServerTitle":"Running the Server",
  "initServerParagraph1":"SunnieJS is built based on <span class='text-primary'>Gulp</span> for task automation and <span class='text-primary'>Node</span> for package management and server Applications.",
  "initServerParagraph2":"If you want <span class='text-primary'>to start</span> the <span class='text-primary'>server</span> you just have to execute the following command:",
  "initServerParagraph3":"This task will compile the project and will raise two local servers, one for production and the other one for development, on the urls <span class='text-primary'>http://localhost:8080/default/en</span> and <span class='text-primary'>http://localhost:8083/default/en</span>",
  "initServerParagraph4":"Thanks to Gulp, SunnieJS has a series of automated tasks that allow us to perform the different compilation operations in a very simple way.",
  "initServerParagraph5":"The structure of all the tasks that we will launch from CMD is <span class='text-primary'>gulp nombreTarea</span> where name task will be the name of the gulp task that we already have pre-created to compile, for example, the CSS or JS of our project.",
  "initServerParagraph6":"Below is the main list of <span class = 'text-primary'> tasks available </ span>:",
  "initServerTableTH1":"Task name",
  "initServerTableTH2":"Description",
  "initServerTableTH3":"How to",
  "initServerTableContainerDeployDescription":"General compilation task. Make a complete compilation of the project, including all its files: JS, CSS, HTML, etc...",
  "initServerTableContainerDeployCSSDescription":"Compile only the CSS of the project, transforming the SASS into clean and minified CSS code",
  "initServerTableContainerDeployJSDescription":"Compile only the JS of the project, transforming the javascript into clean and minified js code",
  "initServerTableContainerDeployPUGDescription":"Compile only the PUG of the project, transforming the pug into clean HTML code and applying the internationalization of variables if there is one.",
  "initServerParagraph7":"The objective of the previous tasks is to <span class='text-primary'>streamline the work</span> of any developer by allowing them to compile only one part of the project, which entails a much shorter time of <span class='text-primary'>compilation</span> and a greater <span class='text-primary'>agility</span> of development.",
  "initServerParagraph8":"In addition, being multisite, there are another series of variables that we can add to these codes to execute the tasks even more efficiently, for example, by compiling only one site or indicating that we only want to compile the development environment, without even taking it to production.",
  "initServerParagraph9":"For this we can use the following variables:",
  "structureProjectTitle":"Project Structure",
  "structureProjectParagraph1":"Every project developed with SunnieJS has a similar and predefined structure.",
  "layoutsParagraph1":"The layouts folder contains all the layouts created in the portal for use when defining the distribution of the content of a page. Each layout is created based on the same structure and all the detail of it can be seen in the <a href='./layouts.html' title='Ir a Layouts'>section of layouts</a> of this portal.",
  "fragmentsParagraph1":"A fragment is a <span class = 'text-primary'>piece of reusable code</span> between different components. For example, a button. In this folder you must create the different fragments that will be used in the portal.",
  "varServerTableTH1":"Variable Name",
  "envVar1":"If we do not define this variable, the compilation will be carried out in production. If environment takes the dev value then the project will only be compiled in development.",
  "envVar2":"Where site is the name of the defined site (name of your folder). If it is not defined, it will compile all server sites.",
  "envVar3":"Where page is the name of the page to compile (field id in the sitemap of the site). If it is not defined, it will compile all server pages. This parameter is necessary to use it next to --site.",
  "initApiTitle":"Starting the API",
  "initApiParagraph1":"SunnieJS 3 has a complete API for portal management. Through it you can manage the sites, pages and components, being able to add new elements, edit or delete them or even publish the development site and all through the new CMS that it incorporates.",
  "initApiParagraph2":"To start the API and start using the CMS, it is enough to launch the following gulp task:",
  "initApiParagraph3":"Once started, the CMS will be available in the development environment and all changes that are made will only be valid in that environment. When the user wishes to publish these changes in the production environment, there is an option to Publish to the CMS that will transfer all these changes to the other environment.",
  "structureProjectApp":"project source code. This is where a developer should work.",
  "structureProjectServer":"CMS API source code",
  "structureProjectNodeModules":"folder that stores all node modules installed in the project",
  "structureProjectParagraph2":"In turn, app has another series of subfolders:",
  "structureProjectBundles":"is the CORE code of the application. From it all the elements of the system will be extended. What has not been redefined in plugins will be used as is from bundles. The code in this folder should not be modified.",
  "structureProjectPlugins":"This folder houses all the new elements that are created, be they sites, components, appearance themes, etc ... This is where developers should work to extend the functionality.",
  "structureProjectDevelopment":"Final code with compiled development tools. The result is only html, css and javascript distributed in language folders and sites (1 folder per cad site and in turn 1 folder for each language defined in the portal) and this is where the localhost points: 8083. Unlike public, this folder contains all the code generated for the CMS and shows the CMS editing tools.",
  "structureProjectPublic":"final code of the compiled project. The result is only html, css and javascript distributed in language folders and sites (1 folder per cad site and in turn 1 folder for each language defined in the portal) and this is where the localhost points: 8080.",
  "structureProjectBuild":"precompiled code It is a folder with precompiled code before the final public code. Here the final code is generated, result of the mix of bundles and plugins",
  "structureProjectSitesParagraph":"The sites folder contains all the sites created in the portal. Each site is composed of N pages and each page in turn is composed of N components placed under a certain physical distribution. Both components, layouts, fragments and themes are shared across all sites in a transversal way. Each site in turn has its own sitemap with a certain configuration and its own generic translations.",
  "structureProjectComponentsParagraph":"The components folder will contain all those components that will form the pages. A component is a functional and independent piece that performs a certain function within a portal such as an agenda, a photo carousel or something as simple as plain HTML content. To learn more about components visit their <a href='./components' title='Go to components'>section</a>.",
  "structureProjectThemesParagraph":"The themes folder contains all the appearance themes available on the portal. A theme of appearance is the piece that gives structure to the page at a general level (header, menu, footer, etc ...), contains the styles and functionalities of the site."
}