mixin component-getStarted(content)
	.row
		.col-12
			.card
				.card-body
					h1 ${{ getStarted.pageTitle }}$

					p ${{ getStarted.paragraph1 }}$

					p ${{ getStarted.paragraph2 }}$

	.row
		.col-12
			.card
				.card-body
					h2 ${{ getStarted.installationTitle }}$

					p ${{ getStarted.installationParagraph1 }}$

					pre
						| npm install

					p ${{ getStarted.installationParagraph2 }}$

	.row
		.col-12
			.card
				.card-body
					h2 ${{ getStarted.initServerTitle }}$
					
					p ${{ getStarted.initServerParagraph1 }}$

					p ${{ getStarted.initServerParagraph2 }}$

					pre
						| gulp

					p ${{ getStarted.initServerParagraph3 }}$

					p ${{ getStarted.initServerParagraph4 }}$

					p ${{ getStarted.initServerParagraph5 }}$

					p ${{ getStarted.initServerParagraph6 }}$

					.table-responsive-md
						table(class="table")
							thead
								tr
									th ${{ getStarted.initServerTableTH1 }}$
									th ${{ getStarted.initServerTableTH2 }}$
									th ${{ getStarted.initServerTableTH3 }}$
							tbody
								tr
									td <strong>deploy</strong>
									td ${{ getStarted.initServerTableContainerDeployDescription }}$
									td gulp deploy

								tr
									td <strong>deployCSS</strong>
									td ${{ getStarted.initServerTableContainerDeployCSSDescription }}$
									td gulp deployCSS					

								tr
									td <strong>deployJS</strong>
									td ${{ getStarted.initServerTableContainerDeployJSDescription }}$
									td gulp deployJS

								tr
									td <strong>deploySites</strong>
									td ${{ getStarted.initServerTableContainerDeployPUGDescription }}$
									td gulp deployPUG

					p ${{ getStarted.initServerParagraph7 }}$
					p Además, al ser multisite, existen otra seríe de variables que podemos añadir a estos códigos para ejecutar las tareas de forma aún mas eficiente, por ejemplo, compilando solo un site o indicando que solo deseamos compilar el entorno de desarrollo, sin llevarlo aún a producción.
					p Para ello podemos usar las siguientes variables:
					.table-responsive-md
						table(class="table")
							thead
								tr
									th ${{ getStarted.varServerTableTH1 }}$
									th ${{ getStarted.initServerTableTH2 }}$
									th ${{ getStarted.initServerTableTH3 }}$
							tbody
								tr
									td <strong>--env entorno</strong>
									td Si no definimos dicha variable la compilación se realizará en producción. Si entorno toma el valor dev entonces el proyecto solo será compilado en desarrollo.
									td gulp deploySites --env dev

								tr
									td <strong>--site site</strong>
									td Donde site es el nombre del site definido(nombre de su carpeta). Si no es definido, compilará todos los sites del servidor.
									td gulp deploySites --env dev --site default
								tr
									td <strong>--page page</strong>
									td Donde page es el nombre de la página a compilar(campo id en el sitemap del site). Si no es definido, compilará todas las página del servidor. Este parámetro es necesario usarlo junto al de --site para evitar problemas.
									td gulp deploySites --env dev --site default --page getStared

	.row
		.col-12
			.card
				.card-body
					h2 Arrancando la API
					p SunnieJS 3 dispone de una completa API para la gestión del portal. A través de ella podrás gestionar los sites, las páginas y los componentes, pudiendo añadir nuevos elementos, editarlos o borrarlos o incluso publicar el site de desarrollo y todo a través del nuevo CMS que incorpora.

					p Para arrancar la API y poder empezar a usar el CMS es suficiente con lanzar la siguiente tarea de gulp:

					pre
						| gulp apiServer

					p Una vez arrancada, el CMS estará disponible en el entorno de desarrollo y todos los cambios que se vayan realizando solo tendrán validez en dicho entorno. En el momento que el usuario desee publicar esos cambios en en entorno de producción exite la opción de Publicar en el CMS que traasladará todos esos cambios al otro entorno.

	.row
		.col-12
			.card
				.card-body
					h2 ${{ getStarted.structureProjectTitle }}$

					p ${{ getStarted.structureProjectParagraph1 }}$
					
					ul
						li <strong>app:</strong> código fuente del proyecto. Aquí es donde un desarrollador debe trabajar
							
						li <strong>server:</strong> código fuente de la API del CMS

						li <strong>node_modules:</strong> carpeta que almacena todos los módulos de node instalados en el proyecto

					p A su vez, app dispone de otra serie de subcarpetas:
					
					ul
						li <strong>bundles:</strong> es el código CORE de la aplicación. A partir de él todos los elementos del sistema se extenderán. Aquello que no haya sido redefinido en plugins será utilizado tal cual desde bundles. El código de esta carpeta no debe ser modificado.
						
						li <strong>plugins:</strong> esta carpeta alberga todos los nuevos elementos que se creen, ya sean sites, componentes, temas de apariencia, etc... Aquí es donde los desarrolladores deben trabajar para extender la funcionalidad.
						
						li <strong>development:</strong> código final con herramientas de desarrollo compilado. El resultado solo es html, css y javascript distribuidos en carpetas de idiomas y sites(1 carpeta por cad site y a su vez 1 carpeta por cada idioma definido en el portal) y es aquí donde apunta el localhost:8083. A diferencia de public, esta carpeta contiene todo el código generado para el CMS y muestra las herramientas de edición del CMS.
						
						li <strong>public:</strong> código final del proyecto compilado. El resultado solo es html, css y javascript distribuidos en carpetas de idiomas y sites(1 carpeta por cad site y a su vez 1 carpeta por cada idioma definido en el portal) y es aquí donde apunta el localhost:8080.
						
						li <strong>build:</strong> código precompilado. Es una carpeta con código precompilado previo al código final de public. Aqui se genera el código final, resultado de la mezcla de bundles y el		

					h4 Sites
					p La carpeta sites contiene todos los sites creados en el portal. Cada site está compuesto de N páginas y cada página a su vez está compuesta por N componentes colocados bajo una cierta distribución física. Tanto los componentes, las layouts, fragments y themes son compartidos por todos los sites de forma transversal. Cada site a su vez dispone de su propio sitemap con una cierta configuración y de sus propias traducciones genéricas.

					h4 Components
					p La carpeta components contendrá todos aquellos componentes que formarán las páginas. Un componente es una pieza funcional e independiente que realiza cierta función dentro de un portal como una agenda, un carrusel de fotos o algo tan simple como un contenido HTML plano. Para saber más sobre componentes visita su <a href="./components" title="Ir a componentes">sección</a>.

					h4 Layouts
					p ${{ getStarted.layoutsParagraph1 }}$

					h4 Fragments
					p ${{ getStarted.fragmentsParagraph1 }}$


					h4 Themes
					p La carpeta themes contiene todos los temas de apariencia disponibles en el portal. Un tema de apariencia es la pieza que le da estructura a la página a nivel general(cabecera, menu, footer, etc...), contiene los estilos y las funcionalidades javascript transversales del site.
