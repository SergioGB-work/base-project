{
  "pageTitle":"Components",
  "paragraph1":"All the components of SunnieJS are created based on the same HTML structure located in <span class='text-primary wbba'>/src/pug/templates/component.pug</span> and the definition of them for their use it is included in <span class='text-primary wbba'>/src/pug/templates/include_components.pug</span>.",
  "paragraph2":"Unlike previous versions, where we had one physical file per page, in the new version of SunnieJS all the definition of the pages and the use of each component is defined in the sitemap of each site.",
  "paragraph3":"To add a component to a page, the simplest and most intuitive option is to use the CMS tool through which with a simple form we can add, edit or delete components to a page and configure them.",
  "paragraph4":"On the other hand, there is the option to directly edit the sitemap.json file of the site and for each page and the layout gap define the components that go and their configuration.",
  "paragraph5":"Each component with configurable content has a config.json file which specifies all the configuration parameters available to it and that must be configured in the content object of the content.",
  "paragraph6":"There are also a series of configurable generic parameters to add a component that are listed below:",  
  "howToUseTitle":"How to",
  "param":"Param",
  "description":"Description",
  "default":"Default",
  "componentTypeDescription":"Component name to be used. Matches the name of the component folder",
  "componentIdDescription":"Unique identifier of the component. The identifier is concatenated to the name of the component when the compilation is made",
  "componentContentDescription":"Dynamic content of the component that we can send you as a parameter. Supports any type of data: String, JSON, Array, boolean, etc...",
  "componentComponentTitleDescription":"Title of the component. In case of selecting the showTitle parameter to true this will be the text that shows as title.",
  "componentShowTitleDescription":"If it is set to 'false' it will not show the component title(componentTitle). With any other value if it will show",
  "componentFullDescription":"Style parameter. In case of being true the component will be shown at 100% of the hole where it is located, without defining paddings or background. The component-full class is added to the component.",
  "componentClassesDescription":"Parameter that allows adding additional classes to the component root to alter its style or behavior.",
  "componentNewDescription":"If it is 'true' the component is shown with the preview view to be edited",
  "componentExampleParagraph1":"There are options for adding a component, on the one hand you can add it directly to the page through the sitemap and on the other hand you can make your call directly from PUG if for example you want to add one component inside another.",
  "componentExampleParagraph2":"Add component to page",
  "componentExampleParagraph3":"Add component to PUG",
  "example":"Example",
  "examples":"Examples",
  "componentsList":"Components List",
  "componentsListParagraph1":"Below is the list of default components available for use:",
  "goToComponent":"Go to the Component",
  "goComponents":"Go to Components",
  "goToComponentsList":"Go to the Components List",
  "loginParagraph1":"Login form with field format validation",
  "params":"Params",
  "showLinkedImage":"Displays a clickable image",
  "name":"Name",
  "imageURL":"URL of the image",
  "altText":"alternative text of the image",
  "longDesc":"long description",
  "imageLink":"image link",
  "titleLink":"link title",
  "linkTarget":"link target",
  "imageGoHome":"Image Go to Home",
  "goHome":"Go Home",
  "highlightedContentComponentDescription":"Displays a promotional banner composed of a content and a button centered on the container.",
  "htmlContent":"HTML content of the component",
  "jsonContentButton":"JSON with the content of the button.",
  "buttonText":"button text",
  "buttonURL":"url to which the button links",
  "buttonTitle":"button title",
  "cardCarouselDescription":"It shows a carousel of cards composed of an image, a header, a text and a link. Additionally you can add a price to convert it into <a href='#componentProductsCardsListCarousel' title='Ir to Products Cards List Carousel'>product carousel</a>",
  "arrayCards":"Cards array",
  "arrayImages":"Images array",
  "cardHeader":"Card header",
  "descriptionText":"description text",
  "cardLink":"card link",
  "cardClasses":"additional css classes to add to the card to alter its visualization",
  "cardPrice":"price of card content",
  "imageComponentDescription":"Displays an image",
  "breadcrumbsComponentDescription":"Show the breadcrumbs",
  "breadcrumbsComponentArray":"Array of pages in JSON format. Each JSON is composed of the following parameters",
  "pageURL":"page url",
  "pageName":"page name",
  "highlightedSideImageComponentDescription":"It shows a promotional banner composed of a content, a button and an image that you can select your position.",
  "htmlContentComponent":"HTML content of the component",
  "imagePosition":"Image posiition ('left' o 'right')",
  "jsonContentImage":"JSON with the content of the image.",
  "sliderComponentDescription":"It shows a Slider of images with navigation and arrows, all responsive.",
  "imageTitleLink":"title of the image link",
  "logoComponentDescription":"Displays the portal logo",
  "highlightedBannerComponentDescription":"Displays a promotional banner composed of a text and a button.",
  "highlightedFlipsComponentDescription":"It shows an array of banners composed of an icon, a headline and a text. The icon can be fontawesome, material or glyphicon.",
  "bannerHeader":"Header of each banner listing",
  "bannerDescription":"Banner text",
  "bannerIconType":"Type of banner icon(material, fontawesome o glyphicon)",
  "bannerIconCode":"Banner icon code",
  "navigationComponentDescription":"Show menu of hierarchical links based on bootstrap classes and with different configurable views",
  "navigationView":"view of the menu ('tabs', 'pills'). If left empty, a vertical menu will be displayed",
  "navigationJustified":"Applicable to pills and tabs. Makes them look 100% of the width of the hole they occupy and the content is distributed",
  "navigationStacked":"Stack the pills one on top of the other making a vertical menu",
  "navigationPages":"Array of pages to show in the menu",
  "childsPages":"Array of child pages of the current page. It will show them as a dropdown as long as the type of navigation accepts it.",
  "htmlContentDescription":"Allow to display any type of HTML content",
  "htmlContentParamHTMLContent": "HTML content to show",
  "siteSelectorComponentDescription":"This component allows you to change sites between the sites defined in the portal.",
  "languageSelectorComponentDescription":"This component allows you to modify the language of the portal.",
  "publisherComponentDescription":"This component allows you to display an ordered and paginated list of content filtered by type.",
  "publisherContentType":"Type of content to be displayed in the list",
  "publisherPagination":"Activate pagination. It can be 'true' or 'false'",
  "publisherOrder":"Content management. It can be 'createdDate' or 'name'",
  "publisherInitialPage":"Initial page to display of the selected contents",
  "publisherItemsPerPage":"Number of items to display per page. If pagination is not shown, it acts as a limit of the element to be displayed.",
  "publisherRel":"Context of the filters. Its use is recommended if there are other components with filters on the page.",
  "publisherURLDetail":"URL of the page where the content detail will be displayed. This page receives an idContent parameter in the URL to load the content detail.",
  "publisherTemplateCode":"It allows to customize the template that will show the list. If left empty it will use the default template.",
  "iconLink":"Icon link",
  "iconAltText":"Alternative icon text",
  "openMode":"Opening mode of the new URL (redirect or new tab)",
  "iconType":"Type of icon (Font Awesome or Material)",
  "iconCode":"Code of the icon. It must be obtained from the corresponding library of icons",
  "iconSize":"Icon size",
  "iconColor":"Color in HEX icon",
  "formFilterDescription":"This component allows generating dynamic forms. Said forms can work as a traditional form to indicate an action and send all the information to that service or it can function as a filter, in which case when sending the forms it will reload the page publishing the data in the URL as GET parameters so that they can be consumed by another component.",
  "formFilterFormFilter":"If you select 'true' the form will work as a filter",
  "formFilterAction":"If the form works in the traditional way, this field is the service to send the data to",
  "formFilterMethod":"POST or GET method of the service to which the data is sent",
  "formFilterCallback":"Javascript function to execute once the data is sent and the service responds correctly",
  "formFilterRel":"It allows creating data groups in such a way that the form will publish the filters in the indicated data group. It should be separated by, if you wish to indicate more than one group",
  "formFilterItems":"Array of the data of the inputs that will form the form",
  "formFilterLabel":"Field label",
  "formFilterType":"Field type: text, select, number, etc...",
  "formFilterOptions":"If you have selected type select, select options",
  "formFilterOptionText":"Option text",
  "formFilterOptionValue":"Option value",
  "formFilterName":"Field name",
  "formFilterPlaceholder":"Field placeholder",
  "formFilterTooltip":"Text in tooltip format that helps the field",
  "formFilterDefaultValue":"Field default value",
  "formFilterRequired":"Indicates whether the field is required or not. 'true' or 'false'",
  "formFilterSize":"Field size. Use the bootstrap classes 4",
  "formFilterRegExp":"Regular expression to validate the field",
  "dataListDescription":"This component allows the loading of dynamic data from a service and display through a template.",
  "dataListService":"URL of the REST service that you want to consume",
  "dataListMethod":"Request method. GET or POST",
  "dataListStaticCode":"Static code of the template. HTML",
  "dataListTemplate":"Template ID",
  "dataListTemplateCode":"Dynamic code of the template. JSRender",
  "dataListTarget":"CSS selector where the code generated by the template will be placed",
  "dataListInitialPage":"Initial page to load if the data is paged",
  "dataListItemsPerPage":"Number of items to display per page",
  "dataListAditionaldata":"Additional information to send in body of the request",
  "dataListCallback":"Javascript function to execute once the service data has been loaded",
  "dataListContent":"Additional parameters that can be sent to the callback from the origin of the request",
  "dataListEnableGetParams":"Enables service data to be affected by the GET parameters of the URL. These parameters are transformed into variables that are sent to the service in the request itself.",
  "dataListGetParamsList":"If it is defined, only the data will be filtered by the parameters defined here",
  "dataListRel":"It allows you to create groups of data in such a way that only those filters that are within the indicated data group affect you.",
  "dataListLiveReload":"Activate automatic data reload",
  "dataListTimeReload":"Time interval that establishes how often the data should be reloaded",
  "dataListCache":"If activated, the data returned by the service will be stored in sessionstorage.",
  "dataListPagination":"Activate the paging of the data if the original service is able to do so",
  "accordionDescription":"Accordion component in which different blocks are listed that can be displayed when pressed.",
  "accordionCollapseParent":"If it is set to 'true' when opening any of the component accordions, the rest will be automatically closed if they were open.",
  "accordionHeader":"Accordion Header",
  "accordionContent":"Expanding content",
  "accordionCollapsed":"If you select 'opened' the block will be displayed by default. If selected to 'closed' it will be shown closed.",
  "filterPillsDescription":"This component shows a pill from the GET parameters of the URL. Through its configuration you can manage which pills you want to display according to the data group or ignore the ones you want. Each pill has an X that when pressed eliminates that filter from the URL allowing this component to work together with the data-list component.",
  "filterPillsRel":"It will show only those filters associated with the defined data groups. You can define more than one group by separating them by ,",
  "filterPillsIgnored":"Allows you to ignore the desired filters by separating them by ,",
  "componentConfigParagraph1":"Each configurable component has a config.json file in the root of its folder that allows defining the customizable fields that an administrator user can modify. Thanks to this, we can parameterize the component so that it has different behaviors depending on the page where we want to use it.",
  "componentConfigParagraph2":"Config is an array of data that make up the management form of a component. Each field can be configured to control its type or form of display. These fields can be retrieved from the view.pug of each component to use them for the customization of the component.",
  "componentConfigParagraph3":"By default, each component has a series of defined generic parameters that are common to all components but there is also the possibility of adding new parameters for each component through said config.js file",
  "componentConfigParagraph4":"The different configuration parameters of each field and the values it can take are shown below.",
  "componentConfigExampleTitle":"Config.json example",
  "componentConfigTableTH1":"Attribute",
  "componentConfigTableTH2":"Description",
  "componentConfigTableTH3":"Values",
  "componentConfigTableContainerLabelDescription":"Field label",
  "componentConfigTableContainerTypeDescription":"Type of form field. If textarea is selected, it will become a rich text element.",
  "componentConfigTableContainerNameDescription":"The name attribute of the field. This will be the name with which the field value can be retrieved later.",
  "componentConfigTableContainerRequiredDescription":"If defined, the field must be filled in. The definition of this attribute is not mandatory.",
  "componentConfigTableContainerOptionsDescription":"If type = 'select' is selected, this field defines the array with the different values of the select.",
  "componentConfigTableContainerValueDescription":"It corresponds to the value attribute of the input or the text if it is a textarea.",
  "componentConfigTableContainerArrayContentDescription":"If type = 'array' is selected, it will allow to create a block of repeatable elements. On a visual level, a + and - button will be displayed in the editing view of a component to add elements from the defined structure. Internally, this field is an array of inputs that can be defined as any other config input.",
  "componentConfigTableContainerContentDescription":"If type = 'group' is selected, it will allow to create a block of elements encompassed by this group. It serves as a grouping element in such a way that upon receiving the data in the component view you can access it through nameDelGroup.nameDelInput. Visually, in the edit view it will be displayed as a fieldset grouping the inputs that it encompasses.",
  "componentConfigTableContainerVisibilityDescription":"If 'hidden' is selected, the input will appear hidden by default.",
  "componentConfigTableContainerIDDescription":"If desired, an ID can be assigned to the field.",
  "componentConfigTableContainerDataAttributesDescription":"You can add to the input all the additional attributes that you want and that are not contemplated with the defined options. 'dataAttributes': 'data-parent='[name=formFilter]' data-parent-event='change' data-parent-event-action='show' data-parent-event-value='true''",
  "componentConfigTableContainerDataAttributesParentDescription":"You can add to the form-group that includes the input all the additional attributes that you want and that are not contemplated with the defined options. 'dataAttributesParent': 'data-parent='[name=formFilter]' data-parent-event='change' data-parent-event-action='show' data-parent-event-value='true''. Resulta bastante útil cuando necesitas que ciertos campos se muestren u oculten en base a valores de otros por ejemplo.",
  "componentConfigTableContainerParentIdDescription":"Assign the identifier to the parent form-group of the input.",
  "componentConfigTableContainerShowLabelDescription":"Indicate if you want to show or hide the input label. By default it is displayed.",
  "componentConfigTableContainerHelpTextDescription":"Add a help text in the form of a tooltip to the label.",
  "componentConfigTableContainerClassesDescription":"Add additional classes to the input.",
  "stepsDescription":"This component is composed of repeatable numbered elements which can be personalized with a text and indicate whether they are active or not.",
  "stepsText":"Item Text",
  "stepsOnClick":"Javascript function to execute when clicking on the element",
  "stepsCurrent":"If it is set to 'true' the item is shown as active"
}