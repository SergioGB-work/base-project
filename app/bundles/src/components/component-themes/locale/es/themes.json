{
  "pageTitle":"Themes",
  "pageDescription":"Un tema de apariencia es la pieza que le da estructura a la página a nivel general(cabecera, menu, footer, etc...), contiene los estilos y las funcionalidades javascript transversales del site.",
  "cssParagraph1":"La carpeta css contiene todos los estilos genéricos del portal. SunnieJS ya dispone de una serie de estilo predefinidos que el desarrollador debe adaptar al estilo final de cada portal.",
  "cssParagraph2":"SunnieJS utiliza <span class='text-primary'>Bootstrap 4</span> como base para la organización y maquetado de todo su portal. Es por ello que se recomienda modificar lo menos posible los estilos por defecto que trae SunnieJS y extender a partir de los mismos desde el archivo <span class='text-primary'>custom.scss</span>",
  "cssParagraph3":"Adicionalmente, desde <span class='text-primary'>base/variables</span> están todas las <span class='text-primary'>variables genéricas</span> del portal que pueden ser usadas para modificar su estilo sin necesidad de modificar ninguna línea de código, consiguiendo asi un <span class='text-primary'>código limpio y reducido</span>, que penalice lo menos posible la carga del portal.",
  "cssParagraph4":"SunnieJS lleva incorporado la fuente icónica <a href='http://fontawesome.io/icons/'' target='_blank' title='Ir a Font Awesome' rel='noreferrer'>Font Awesome</a> para su uso dentro del portal. Asi mismo, se puede utilizar cualquier otra fuente icónica.",
  "javascriptParagraph1":"El directorio de javascript está subdividido a su vez en otros directorios, cada uno con un fin específico.",
  "javascriptList10":"Estos archivos solo son compilado para el entorno de desarrollo. Todos ellos eliminados en el entorno de producción.",
  "javascriptList11":"Son librerias que deben ser cargadas las primeras debido a que otras librerias pueden tener dependencias con ellas. Por ejemplo: jQuery",
  "javascriptList12":"Son las librerías genericas del portal.",
  "javascriptList13":"Son librerias o código JS que debe ejecutarse en la carga inicial del portal desde el <span class='text-primary'>head</span>, sin esperar por nada. Están escritas en javascript puro",
  "javascriptList14":"Archivo principal de javascript. Contiene todas las funciones genéricas del portal definidas en la <a href='./js-functions.html' title='Ir a JS Functions'>página de javascript</a>.",
  "javascriptParagraph2":"Por norma general, cuando desees añadir una nueva librería, deberás añadirla en la carpeta libs.",
  "javascriptParagraph3":"No es necesario añadir la etiqueta <span class='text-primary'>&lt;script&gt;</span> en la cabecera o pie del portal ya que SunnieJS <span class='text-primary'>compila</span> automáticamente las librerias que se encuentran en estas carpetas en un orden para luego generar un único <span class='text-primary'>archivo javascript minificado</span> con todo el código.",
  "imagesParagraph1":"Esta carpeta sirve como almacén de imágenes. Todas las imágenes aquí añadidas pasarán directamente a la carpeta <span class='text-primary'>public</span> dentro de su correspondiente carpeta de images.",
  "templatesParagraph1":"Las templates son plantillas funcionales de contenido reutilizable. Pueden ser tanto estáticas como dinámicas con JSRender. Asi, por defecto, disponemos por ejemplo de una template para el header, otro para las modales, otro para los mensajes de error, etc...",
  "templatesParagraph2":"La mas importante a destacar es <span class='text-primary'>portal.pug </span>que se encarga de definir la estructura global de las páginas(head, body, cabecera, menu, footer). Todas las páginas se crean en base a esta plantilla y se rellenar en base a lo configurado para cada una de ellas a nivel de componentes y layout.",
  "templatesParagraph3":"Están desarrolladas en PUG y posteriormente en la fase de compilación se convierten a HTML.",
  "templatesParagraph4":"Variables disponibles",
  "templatesParagraph5":"Existen una serie de variables que pueden resultar de utilidad para el desarrollador. Se pueden usar tanto en los archivos pug del tema de apariencia como en los componentes.",
  "templatesParagraph6":"A continuación se listan las variables disponibles que también puede encontrar en el archivo templates/variables.pug:",
  "templatesParagraph7":"array de páginas del site",
  "templatesParagraph8":"URL del site. Por ejemplo '/default'",
  "templatesParagraph9":"Nombre del site. Por ejemplo 'default'",
  "templatesParagraph10":"URL completa del site. Por ejemplo '/default/es'",
  "templatesParagraph11":"Si es necesario integrarse con una API diferente a la del CMS, se puede utilizar esta variable. Por ejemplo http://api.google.com/v1/",
  "templatesParagraph12":"Si es necesario integrarse con una API Local se puede usar esta variable. Por ejemplo http://localhost:8080",
  "templatesParagraph13":"URL de la API del CMS. Por defecto http://localhost:8082",
  "templatesParagraph14":"Se pueden crear todas las variables que se consideren necesarias pero no se recomienda eliminar ninguna de las existentes.",
  "templatesParagraph15":"Herencia",
  "templatesParagraph16":"Una de las novedades de SunnieJS 3 es que los temas de apariencia que crees nuevos pueden tomar como base otro creado, un padre, que sirva como base, de tal forma que puedas solo modificar aquello que necesites y lo demás dejar que lo herede del padre.",
  "templatesParagraph17":"Por defecto, existe un tema de apariencia básico llamada <span class='text-primary'>'sun-theme'</span> del cual heredan todos los temas personalizados que crees, pero esta herencia se puede modificar en el archivo <span class='text-primary'>templates/build.pug</span> para que tu tema herede de otro.",
  "templatesParagraph18":"Si deseas modificar algo en tu tema de apariencia solo tienes que replicar la ruta del archivo que quieres modificar dentro de tu tema de apariencia y cuando se compile, el resultado será todo el código del padre excepto aquello que hayas redefinido."
}