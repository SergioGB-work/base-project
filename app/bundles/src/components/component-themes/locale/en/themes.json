{
  "pageTitle":"Themes",
  "pageDescription":"A theme of appearance is the piece that gives structure to the page at a general level (header, menu, footer, etc ...), contains the styles and functionalities of the site's javascript.",
  "cssParagraph1":"The css folder contains all the generic styles of the portal. SunnieJS already has a series of predefined styles that the developer must adapt to the final style of each portal.",
  "cssParagraph2":"SunnieJS uses <span class = 'text-primary'>Bootstrap 4</span> as the basis for the organization and layout of your entire portal. That is why it is recommended to modify as little as possible the default styles that SunnieJS brings and to extend from them from the file <span class='text-primary'>custom.scss</span>",
  "cssParagraph3":"Additionally, from <span class='text-primary'>base/variables</span> are all the <span class='text-primary'> generic variables </span> of the portal that can be used to modify their style without need to modify any line of code, thus achieving a <span class = 'text-primary'>clean and reduced code</span>, which penalizes as little as possible the loading of the portal.",
  "cssParagraph4":"SunnieJS incorporates the iconic font <a href='http://fontawesome.io/icons/'' target='_blank' title='Go to Font Awesome' rel='noreferrer'>Font Awesome</a> for use within the portal. Likewise, any other iconic font can be used.",
  "javascriptParagraph1":"The javascript directory is subdivided in turn into other directories, each with a specific purpose.",
  "javascriptList10":"These files are only compiled for the development environment. All of them eliminated in the production environment.",
  "javascriptList11":"They are libraries that must be loaded first because other libraries can have dependencies with them. For example: jQuery",
  "javascriptList12":"They are the generic libraries of the portal.",
  "javascriptList13":"They are libraries or JS code that must be executed in the initial load of the portal from the <span class='text-primary'>head</span>, without waiting for anything. They are written in pure javascript",
  "javascriptList14":"Main javascript file. It contains all the generic functions of the portal defined in the <a href='./js-functions.html' title='Go to JS Functions'>javascript page</a>.",
  "javascriptParagraph2":"As a general rule, when you want to add a new library, you must add it to the libs folder.",
  "javascriptParagraph3":"It is not necessary to add the tag <span class = 'text-primary'>&lt;script&gt;</span> in the header or footer of the portal because SunnieJS <span class = 'text-primary'>compiles</span> automatically the libraries that are in these folders in an order to then generate a single <span class = 'text-primary'>miniscript javascript file</span> with all the code.",
  "imagesParagraph1":"This folder serves as an image store. All the images added here will go directly to the folder <span class = 'text-primary'>public</span> within its corresponding folder of images.",
  "templatesParagraph1":"Templates are functional templates of reusable content. They can be both static and dynamic with JSRender. Thus, by default, we have for example a template for the header, another for manners, another for error messages, etc ...",
  "templatesParagraph2":"The most important to highlight is <span class = 'text-primary'> portal.pug </span> which is responsible for defining the overall structure of the pages (head, body, header, menu, footer). All pages are created based on this template and filled in based on what is configured for each of them at the component and layout level.",
  "templatesParagraph3":"They are developed in PUG and later in the compilation phase they are converted to HTML.",
  "templatesParagraph4":"Available variables",
  "templatesParagraph5":"There are a number of variables that can be useful for the developer. They can be used in both the appearance theme's pug files and the components.",
  "templatesParagraph6":"Listed below are the available variables that you can also find in the templates / variables.pug file:",
  "templatesParagraph7":"array of site pages",
  "templatesParagraph8":"Site URL. For example '/ default'",
  "templatesParagraph9":"Site Name. For example 'default'",
  "templatesParagraph10":"Full URL of the site. For example '/ default / es'",
  "templatesParagraph11":"If it is necessary to integrate with an API different from that of the CMS, this variable can be used. For example http://api.google.com/v1/",
  "templatesParagraph12":"If it is necessary to integrate with a Local API this variable can be used. For example http://localhost:8080",
  "templatesParagraph13":"CMS API URL. Default http://localhost: 8082",
  "templatesParagraph14":"You can create all the variables that are considered necessary but it is not recommended to eliminate any of the existing ones.",
  "templatesParagraph15":"Heritage",
  "templatesParagraph16":"One of the novelties of SunnieJS 3 is that the themes of appearance that you believe new can take as a base another created one, a father, who serves as a base, so that you can only modify what you need and the rest let it inherit it from the father .",
  "templatesParagraph17":"By default, there is a basic-looking theme called <span class = 'text-primary'> 'sun-theme' </span> from which all custom themes you create inherit, but this inheritance can be modified in the <span file class = 'text-primary'> templates / build.pug </span> so that your theme inherits from another.",
  "templatesParagraph18":"If you want to modify something in your appearance theme you just have to replicate the path of the file you want to modify within your appearance theme and when it is compiled, the result will be all the father's code except what you have redefined."
}