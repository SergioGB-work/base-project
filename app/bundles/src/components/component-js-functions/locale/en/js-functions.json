{
  "pageTitle":"Javascript Functions",
  "paragraph1":"SunnieJS has a series of predefined javascript functions that can be used to perform various general actions.",
  "paragraph2":"Below is a list of available functions:",
  "popoverParagraph":"Enables popover elements defined by bootstrap",
  "getDataParagraph1":"Generic AJAX function that handles all AJAX requests to REST services. Any call to a REST service should be made through this function.",
  "getDataParagraph2":"The parameter <strong class='text-primary'>'el'</strong> is a <strong>JSON</strong> whose fields are defined below:",
  "jsonParamsTitle":"JSON Params",
  "param":"Param",
  "description":"Description",
  "howTo":"How to",
  "serviceDescription":"REST service URL",
  "methodDescription":"Type of method with which the service is called. POST or GET",
  "templateDescription":"ID of the template JSRender on which the obtained data will be loaded. It should be left empty if you do not want to load the data on any template.",
  "targetDescription":"ID of the container on which the template with the data will be loaded. It should be left empty if you do not want to show the data.",
  "pageDescription":"Data page that you want to load through the REST service. Leave it to 0 if you wish to load the complete list of data without paging.",
  "itemsPerPageDescription":"Number of rows per page that you want to load. Leave it to 0 if you wish to load the complete list of data without paging.",
  "aditionalDataDescription":"Additional data that you want to send through the body of the service. Use the 'data' parameter of $ .AJAX to send the additional data in JSON format.",
  "callbackDescription":"Name of the additional function to execute once the REST service request has been made and this returns the result. By default, the function receives the data returned by the invoked service. Leave empty if you do not want to execute anything.",
  "contentDescription":"Parameters or additional content sent to the defined callback function. Leave empty if it is not necessary to send any additional data.",
  "enableGetParamsDescription":"Enable the service to use the get parameters of the url and send them to the defined service.",
  "getParamsListDescription":"List of GET parameters that you want to apply to the generation of the request to the rest service.",
  "relDescription":"Sets the filter group to which the request belongs. If it is defined, when making the request it will only use those GET parameters that have the 'rel' defined. For example, order_group1. In the previous example the parameter would be 'order' and the 'rel' would be 'group1'. If there is 'getParamsList', in addition to filtering the get parameters by the 'rel' it will also filter the attributes defined in 'getParamsList'.",
  "dataListParagraph1":"Initializes dynamic data loading on the CSS selector 'el'. It uses the data attributes defined in the element to perform the data loading.",
  "dataListParagraph2":"These attributes can be consulted in the section of <a href='./data-definitions.html#data-definitions-data-loading-block'>Data Definitions</a>.",
  "paginationParagraph1":"Generates the paging of a list of dynamic data from the data attributes defined in the CSS selector 'el'.",
  "paginationParagraph2":"These attributes can be consulted in the section of <a href='./data-definitions.html#data-definitions-data-pagination-block'>Data Definitions</a>.",
  "errorParagraph1":"This generic function receives the error code (status) occurred (200,401,404, etc ...) and automatically displays the corresponding error message. It is the generic function that defines the generic errors of the portal. It can be extended with more error codes depending on the use case. Some errors also support the reception of the text message to be displayed.",
  "errorParagraph2":"If you want to use custom errors, there is the code parameter that allows you to capture a custom error code, LOGIN_FAILED for example, and process it. In case there is both a status and a code, the most restrictive error code will be displayed, that is, code along with the message defined for it.",
  "errorParagraph3":"It uses the generic modal of errors to show this error.",
  "showLoadingParagraph1":"Allows showing the generic loading layer. By default, any ajax request that is made automatically shows the layer.",
  "hideLoadingParagraph1":"Permite ocultar la capa de loading genérica. Por defecto, cualquier peticion ajax que se completa, ya sea correctamente o con errores oculta la capa.",
  "showErrorParagraph1":"It uses the generic modal of error to show a modal with the title and the content that is facilitated to him through the parameters of the function.",
  "modalTitle":"Title of the modal. It must be a String",
  "modalTitleHowTo":"'Login Error'",
  "modalContentTitle":"Descriptive text of the error that will be shown in the body of the modal. It must be a String.",
  "modalContentHowTo":"'You have entered an incorrect username or password'",
  "showErrorHTMLParagraph1":"It uses the generic modal of error to show a modal with the title and the content that is facilitated to him through the parameters of the function but unlike the previous one, this function admits HTML content.",
  "modalHTMLContentTitle":"Content of the error that will be shown in the body of the modal. Supports HTML",
  "modalHTMLContentHowTo":"'You have entered a <strong>incorrect username or password</strong>'",
  "filterContentByRolParagraph1":"Allows the filtering of content by role from the previously defined data attributes. It is especially useful when loading dynamic contents that must be filtered according to the role of the logged in user.",
  "dataSearchParagraph1":"It allows to initialize the elements that have defined a <a href='./data-definitions.html#data-definitions-data-search-block'>data-search='true'</a>.",
  "checkRolParagraph1":"Función escrita en javascript puro que permite controlar si un usuario tiene acceso a una página. En caso de que el usuario tenga un rol superior al rol pasado como parámetro se redirige al usuario a la pagina de Acceso denegado.",
  "example":"Example",
  "checkSessionParagraph1":"Function written in pure javascript that defines if to access a page it is necessary to be logged. If it is used in the header of a page it means that it is necessary that the user is logged in to access. If it is not, the user is redirected to the corresponding error page."
}