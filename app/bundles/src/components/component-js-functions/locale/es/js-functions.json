{
  "pageTitle":"Funciones Javascript",
  "paragraph1":"SunnieJS dispone de una serie de funciones javascript predefinidas que se pueden utilizar para realizar diversas acciones generales.",
  "paragraph2":"A continuación se detalla el listado de funciones disponibles:",
  "popoverParagraph":"Habilita los elementos popover definidos mediante bootstrap",
  "getDataParagraph1":"Función AJAX genérica que se encarga de todas las peticiones AJAX a servicios REST. Cualquier llamad a un servicio REST debería ser realizada a través de esta función.",
  "getDataParagraph2":"El parámetro <strong class='text-primary'>'el'</strong> es un <strong>JSON</strong> cuyos campos se definen a continuación:",
  "jsonParamsTitle":"Parámetros JSON",
  "param":"Parámetro",
  "description":"Descripción",
  "howTo":"Uso",
  "serviceDescription":"URL del servicio REST",
  "methodDescription":"Tipo de método con el que se llama al servicio. POST o GET ",
  "templateDescription":"ID de la plantilla JSRender sobre la que se cargarán los datos obtenidos. Se debe dejar vacío si no se desea cargar los datos sobre alguna plantilla.",
  "targetDescription":"ID del contenedor sobre el que se cargará la template con los datos. Se debe dejar vacío si no se desea mostrar los datos.",
  "pageDescription":"Página de datos que se desea cargar a través del servicio REST. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.",
  "itemsPerPageDescription":"Número de filas por página que se desea cargar. Dejar a 0 si se desea cargar el listado completo de datos sin paginar.",
  "aditionalDataDescription":"Datos adicionales que se desea enviar a través del body del servicio. Utiliza el parámetro 'data' de $.AJAX para enviar los datos adicionales en formato JSON.",
  "callbackDescription":"Nombre de la función adicional a ejecutar una vez realizada la petición al servicio REST y este devuelve el resultado. Por defecto la función recibe los datos devueltos por el servicio invocado. Dejar vacío si no se desea ejecutar nada.",
  "contentDescription":"Parámetros o contenido adicional enviado a la funcion callback definida. Dejar vacío si no es necesario enviar ningún dato adicional.",
  "enableGetParamsDescription":"Habilita el servicio para que utilice los parametros get de la url y se los envie al servicio definido.",
  "getParamsListDescription":"Listado de parametros GET que se desea que apliquen a la generación de la petición al servicio rest.",
  "relDescription":"Establece el grupo de filtros al que pertenece la petición. Si se define, al realizar la petición solo usaraá aquellos parámetros GET que tengan asociado el 'rel' definido. Por ejemplo, order_group1. En el ejemplo anterior el parámetro sería 'order' y el 'rel' sería 'group1'. En caso de existir 'getParamsList', además de filtrar los parámetros get por el 'rel' también lo hará por el listado de atributos definidos en 'getParamsList'.",
  "dataListParagraph1":"Inicializa la carga dinámica de datos sobre el selector CSS 'el'. Se vale de los data atributos definidos en el elemento para realizar la carga de datos.",
  "dataListParagraph2":"Dichos atributos pueden ser consultados en la sección de <a href='./data-definitions.html#data-definitions-data-loading-block'>Data Definitions</a>. ",
  "paginationParagraph1":"Genera la paginación de un listado de datos dinámicos a partir de los data atributos definidos en el selector CSS 'el'.",
  "paginationParagraph2":"Dichos atributos pueden ser consultados en la sección de <a href='./data-definitions.html#data-definitions-data-pagination-block'>Data Definitions</a>. ",
  "errorParagraph1":"Está función genérica recibe el código de error(status) ocurrido(200,401,404, etc...) y muestra de forma automática el mensaje de error correspondiente. Es la función genérica que define los errores genéricos del portal. Se puede extender con más códigos de error en función del caso de uso. Algunos errores también admiten la recepción del mensaje de texto a mostrar.",
  "errorParagraph2":"Si se desea utilizar errores personalizados, existe el parámetro code que permite capturar un codigo de error personalizado, LOGIN_FAILED por ejemplo, y procesarlo. En caso de que haya tanto un status como un code, se mostrará el código de error mas restrictivo, es decir, code junto con el mensaje definido para él.",
  "errorParagraph3":"Utiliza la modal genérica de errores para mostrar dicho error.",
  "showLoadingParagraph1":"Permite mostrar la capa de loading genérica. Por defecto, cualquier petición ajax que se realice mmuestra de forma automática la capa.",
  "hideLoadingParagraph1":"Permite ocultar la capa de loading genérica. Por defecto, cualquier peticion ajax que se completa, ya sea correctamente o con errores oculta la capa.",
  "showErrorParagraph1":"Utiliza la modal genérica de error para mostrar una modal con el title y el content que se le facilita a través de los parametros de la función.",
  "modalTitle":"Título de la modal. Debe ser un String",
  "modalTitleHowTo":"'Error de login'",
  "modalContentTitle":"Texto descriptivo del error que se mostrará en el cuerpo de la modal. Debe ser un String.",
  "modalContentHowTo":"'Has introducido un usuario o contraseña incorrecta'",
  "showErrorHTMLParagraph1":"Utiliza la modal genérica de error para mostrar una modal con el title y el content que se le facilita a través de los parametros de la función pero a diferencia de la anterior, esta función admite contenido HTML.",
  "modalHTMLContentTitle":"Contenido del error que se mostrará en el cuerpo de la modal. Admite HTML.",
  "modalHTMLContentHowTo":"'Has introducido un <strong>usuario o contraseña incorrecta</strong>'",
  "filterContentByRolParagraph1":"Permite ejecutar el filtrado de contenidos por rol a partir de los data atributos previamente definidos. Es especialmente útil cuando se cargan contenidos dinámicos que deben ser filtrados según el rol del usuario logueado.",
  "dataSearchParagraph1":"Permite inicializar los elementos que tiene definido un <a href='./data-definitions.html#data-definitions-data-search-block'>data-search='true'</a>.",
  "checkRolParagraph1":"Función escrita en javascript puro que permite controlar si un usuario tiene acceso a una página. En caso de que el usuario tenga un rol superior al rol pasado como parámetro se redirige al usuario a la pagina de Acceso denegado.",
  "example":"Ejemplo de uso",
  "checkSessionParagraph1":"Función escrita en javascript puro que define si para acceder a una página es necesario estar logueado. Si se usa en la cabecera de una página significa que es necesario que el usuario este logueado para acceder. En caso de no estarlo, se redirige al usuario a la página de error correspondiente."
}